{"version":3,"sources":["assets/images/logo.png","containers/Sidebar/components/Header.tsx","containers/Sidebar/components/MenuList.tsx","containers/Sidebar/Sidebar.tsx","context/StoreContext.ts","containers/Header/Header.tsx","layouts/MainLayout/MainLayout.tsx","pages/DashboardPage/components/CornStatic.tsx","api/index.ts","components/Loader.tsx","pages/DashboardPage/DashboardPage.tsx","pages/AuthPage/images/bg.jpg","pages/AuthPage/AuthPage.tsx","pages/PoisonsPage/components/AddPoisons.tsx","components/Table/components/MyTableHead.tsx","components/Table/MyTable.tsx","pages/PoisonsPage/components/PoisonsTable.tsx","pages/PoisonsPage/PoisonsPage.tsx","pages/CornPage/components/AddCorn.tsx","pages/CornPage/components/CornTable.tsx","pages/CornPage/CornPage.tsx","pages/SalePage/components/AddSale.tsx","pages/SalePage/components/SaleTable.tsx","pages/SalePage/SalePage.tsx","Routes.tsx","components/Notifier.tsx","App.tsx","reportWebVitals.ts","store/UserStore.ts","store/CornStore.ts","index.tsx","store/RootStore.ts"],"names":["Header","Box","component","px","py","to","Grid","container","spacing","alignItems","item","xs","Avatar","alt","src","logo","Typography","variant","MenuList","List","ListItem","button","Link","ListItemIcon","ListItemText","primary","Sidebar","state","openSidebar","setOpenSidebar","Drawer","open","onClose","event","StoreContext","React","createContext","stores","useContext","classes","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","title","color","useStyles","useState","AppBar","position","Toolbar","IconButton","edge","className","onClick","Button","startIcon","userStore","token","userId","localStorage","removeItem","MainLayout","children","Container","maxWidth","CornStatic","observer","cornStore","allCorn","length","Card","CardContent","data","labels","getAllName","datasets","getAllWeight","backgroundColor","getAllColor","borderColor","borderWidth","size","request","method","url","a","userData","getItem","userDataObj","JSON","parse","init","headers","body","stringify","fetch","response","json","result","ok","Error","message","login","form","register","Loader","CircularProgress","DashboardPage","loadingCorn","setLoadingCorn","loadingSale","setLoadingSale","useEffect","runInAction","console","log","allSale","justifyContent","sm","md","getInfoSalesBar","options","scales","yAxes","stacked","ticks","beginAtZero","xAxes","grid","backgroundImage","bg","height","backgroundPosition","backgroundRepeat","backgroundSize","AuthPage","email","password","setForm","changeHandler","target","name","value","registerHandler","enqueueSnackbar","loginHandler","setItem","style","borderRadius","paddingTop","paddingBottom","TextField","margin","required","fullWidth","id","label","autoComplete","autoFocus","onChange","type","direction","AddPoisons","loading","setLoading","poisonsFormik","useFormik","initialValues","weight","cost","date","onSubmit","values","poison","allPoisons","resetForm","handleSubmit","handleChange","defaultValue","InputLabelProps","shrink","my","disabled","MyTableHead","headData","TableHead","TableRow","map","text","index","TableCell","MyTable","TableContainer","Paper","Table","TableBody","PoisonsTable","sum","Date","toLocaleDateString","_id","PoisonsPage","isShowForm","setIsShowForm","AddCorn","cornFormik","corn","CornTable","CornPage","AddSale","saleFormik","sale","updateCorn","setCorn","indexSearch","findIndex","InputLabel","Select","labelId","setFieldValue","MenuItem","SaleTable","scope","SalePage","Routes","exact","path","Notifier","useSnackbar","displayed","autorun","notifications","forEach","notification","includes","key","removeSnackbar","App","checkAuth","useCallback","storage","storageObj","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CornStore","ready","note","getTime","Math","random","push","filter","makeAutoObservable","this","month","getMonth","rootStore","UserStore","ReactDOM","render","Provider","anchorOrigin","vertical","horizontal","iconVariant","success","error","warning","info","document","getElementById"],"mappings":"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","file":"static/js/main.194c9bd7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.863bdabf.png\";","import React from 'react'\r\nimport {Box, Grid, Typography} from '@material-ui/core'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport logo from '../../../assets/images/logo.png'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Box component='div' px={5} py={3}>\r\n            <Link to='/'>\r\n                <Grid container spacing={3} alignItems=\"center\">\r\n                    <Grid item xs={4}>\r\n                        <Avatar alt=\"Компания\" src={logo}/>\r\n                    </Grid>\r\n                    <Grid item xs={8}>\r\n                        <Typography variant=\"h5\" component=\"h5\">\r\n                            Компания\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Link>\r\n        </Box>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {List, ListItem, ListItemIcon, ListItemText} from '@material-ui/core'\r\nimport {Link} from 'react-router-dom'\r\nimport ToysIcon from '@material-ui/icons/Toys'\r\nimport BugReportIcon from '@material-ui/icons/BugReport'\r\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn'\r\n\r\nexport const MenuList = () => {\r\n    return(\r\n        <List>\r\n            <ListItem button component={Link} to={'/corn'}>\r\n                <ListItemIcon><ToysIcon/></ListItemIcon>\r\n                <ListItemText primary={'Зерно'}/>\r\n            </ListItem>\r\n            <ListItem button component={Link} to={'/poisons'}>\r\n                <ListItemIcon><BugReportIcon/></ListItemIcon>\r\n                <ListItemText primary={'Яды'}/>\r\n            </ListItem>\r\n\r\n            <ListItem button component={Link} to={'/sale'}>\r\n                <ListItemIcon><MonetizationOnIcon/></ListItemIcon>\r\n                <ListItemText primary={'Продажи'}/>\r\n            </ListItem>\r\n        </List>\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {Drawer} from '@material-ui/core'\r\nimport {Header} from './components/Header'\r\nimport {MenuList} from './components/MenuList'\r\n\r\ntype MyProps = {\r\n    openSidebar: boolean\r\n    setOpenSidebar: (x: boolean) => void\r\n}\r\n\r\n\r\nexport const Sidebar: FC<MyProps> = ({openSidebar, setOpenSidebar}) => {\r\n\r\n    const setState = (state: boolean) => (\r\n        event: React.KeyboardEvent | React.MouseEvent,\r\n    ) => {\r\n        setOpenSidebar(state)\r\n    }\r\n\r\n    return (\r\n        <Drawer open={openSidebar} onClose={setState(false)}>\r\n            <Header/>\r\n            <MenuList/>\r\n        </Drawer>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport UserStore from '../store/UserStore'\r\nimport CornStore from '../store/CornStore'\r\nimport RootStore from '../store/RootStore'\r\n\r\ninterface StoreContextInterface  {\r\n    rootStore: RootStore,\r\n    userStore: UserStore,\r\n    cornStore: CornStore\r\n}\r\n\r\nconst StoreContext = React.createContext<StoreContextInterface | null>(null)\r\n\r\nexport default StoreContext","import React, {FC, useContext, useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {AppBar, Button, IconButton, Toolbar, Typography} from '@material-ui/core'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport {Sidebar} from '../Sidebar/Sidebar'\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\r\nimport StoreContext from '../../context/StoreContext'\r\n\r\n\r\nexport const Header: FC = () => {\r\n    const stores = useContext(StoreContext)\r\n    const logout = () => {\r\n        if (stores?.userStore) {\r\n            stores.userStore.token = null\r\n            stores.userStore.userId = null\r\n            localStorage.removeItem('userData')\r\n        }\r\n    }\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                flexGrow: 1,\r\n            },\r\n            menuButton: {\r\n                marginRight: theme.spacing(2),\r\n            },\r\n            title: {\r\n                flexGrow: 1,\r\n                color: '#fff'\r\n            },\r\n        }),\r\n    )\r\n    const classes = useStyles()\r\n    const [openSidebar, setOpenSidebar] = useState<boolean>(false)\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => setOpenSidebar(!openSidebar)}>\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography component={Link} to={'/'} variant=\"h6\" className={classes.title}>\r\n                        Компания\r\n                    </Typography>\r\n                    <Button startIcon={<ExitToAppIcon/>} color=\"inherit\" onClick={logout}>Выйти</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Sidebar openSidebar={openSidebar} setOpenSidebar={setOpenSidebar}/>\r\n        </>\r\n        // <div>\r\n        //     <nav className='light-blue lighten-5 black-text'>\r\n        //         <div className=\"nav-wrapper\">\r\n        //             <ul className=\"left hide-on-med-and-down\">\r\n        //                 <li><span onClick={() => setIsShow(!isShow)}><i className=\"material-icons\"\r\n        //                                                                 style={styleMenu}>menu</i></span></li>\r\n        //             </ul>\r\n        //             <ul className='right hide-on-med-and-down'>\r\n        //                 <li>\r\n        //                     <a href='#!' className='black-text' onClick={() => auth.logout()}>Выйти</a>\r\n        //                 </li>\r\n        //                 <li>\r\n        //                     <Link className='black-text' to='/add-corn'>Зерно</Link>\r\n        //                 </li>\r\n        //                 <li>\r\n        //                     <Link className='black-text' to='/poisons'>Яды</Link>\r\n        //                 </li>\r\n        //                 <li>\r\n        //                     <Link className='black-text' to='/add-sale'>Продажи</Link>\r\n        //                 </li>\r\n        //             </ul>\r\n        //         </div>\r\n        //     </nav>\r\n        // </div>\r\n\r\n\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {Header} from '../../containers/Header/Header'\r\nimport {Container} from '@material-ui/core'\r\n\r\nexport const MainLayout: FC = ({children}) => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Container maxWidth=\"xl\">\r\n                <>\r\n                    {children}\r\n                </>\r\n            </Container>\r\n        </>\r\n\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {Button, Card, CardContent, Typography} from '@material-ui/core'\r\nimport {Pie} from 'react-chartjs-2/dist'\r\nimport {Link} from 'react-router-dom'\r\nimport {observer} from 'mobx-react-lite'\r\nimport StoreContext from '../../../context/StoreContext'\r\n\r\nexport const CornStatic = observer(() => {\r\n    const stores = useContext(StoreContext)\r\n    const getDatacorn = () => {\r\n        const obj = {\r\n            labels: stores?.cornStore.getAllName(),\r\n            datasets: [\r\n                {\r\n                    data: stores?.cornStore.getAllWeight(),\r\n                    backgroundColor: stores?.cornStore.getAllColor(0),\r\n                    borderColor: stores?.cornStore.getAllColor(1),\r\n                    borderWidth: 1,\r\n                },\r\n            ],\r\n        }\r\n        return obj\r\n    }\r\n\r\n    if (!stores?.cornStore.allCorn.length) {\r\n        return (\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        Общее количество зерна\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Для начала заполните данные\r\n                    </Typography>\r\n                    <Button size=\"medium\" color=\"primary\" component={Link} to={'/corn'}>\r\n                        Заполнить\r\n                    </Button>\r\n                </CardContent>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <CardContent>\r\n                <Pie data={getDatacorn()}/>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                    Общее количество зерна\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n})\r\n","import {TypeAuthData} from '../types/auth'\r\nimport {TypeSaleForm} from '../types/sale'\r\nimport {TypePoisonsForm} from '../types/poisons'\r\nimport {TypeCornForm} from '../types/corn'\r\n\r\ntype initLogin = {\r\n    method: string\r\n    headers: {\r\n        'Content-Type': string\r\n        Authorization?: string\r\n    }\r\n    body?: string\r\n}\r\n\r\nconst request = async (method: 'POST' | 'PUT' | 'GET', url: string, data: any = {}) => {\r\n    const userData = localStorage.getItem('userData')\r\n    // FIXME азобраться как лучше сюда таскать токен\r\n    let token = null\r\n    if (userData) {\r\n        const userDataObj = JSON.parse(userData)\r\n        token = userDataObj.token\r\n    }\r\n    const init:initLogin = {\r\n        method: method,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    }\r\n    if (method !== 'GET') {\r\n        init.body = JSON.stringify(data)\r\n    }\r\n    const response = await fetch(url, init)\r\n    const result = await response.json()\r\n\r\n    if (!response.ok) {\r\n        throw new Error(result.message || 'Что-то пошло не так')\r\n    }\r\n    return result\r\n}\r\n\r\nexport const login = (form: TypeAuthData) => request('POST', '/api/auth/login', form)\r\n\r\nexport const register = (form: TypeAuthData) => request('POST', '/api/auth/register', form)\r\n\r\nexport const loadCorn = () => request('GET', '/api/tables/corn')\r\n\r\nexport const addCorn = (form:TypeCornForm) => request('PUT', '/api/tables/corn', form)\r\n\r\nexport const loadPoisons = () => request('GET', '/api/tables/poisons')\r\n\r\nexport const addPoisons = (form: TypePoisonsForm) => request('PUT', '/api/tables/poisons', form)\r\n\r\nexport const loadSale = () => request('GET', '/api/tables/sale')\r\n\r\nexport const addSale = (form: TypeSaleForm) => request('PUT', '/api/tables/sale', form)","import React from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nexport const Loader = () => {\r\n    return(\r\n        <CircularProgress />\r\n    )\r\n}\r\n","import React, {useContext, useEffect, useState} from 'react'\r\nimport {MainLayout} from '../../layouts/MainLayout/MainLayout'\r\nimport {Bar} from 'react-chartjs-2/dist'\r\nimport {observer} from 'mobx-react-lite'\r\nimport {Card, CardContent, Grid, Typography} from '@material-ui/core'\r\nimport {CornStatic} from './components/CornStatic'\r\nimport {loadCorn, loadSale} from '../../api'\r\nimport StoreContext from '../../context/StoreContext'\r\nimport {runInAction} from 'mobx'\r\nimport {TypeCornData} from '../../types/corn'\r\nimport {TypeSaleData} from '../../types/sale'\r\nimport {Loader} from '../../components/Loader'\r\n\r\nexport const DashboardPage = observer(() => {\r\n    const stores = useContext(StoreContext)\r\n    const [loadingCorn, setLoadingCorn] = useState(true)\r\n    const [loadingSale, setLoadingSale] = useState(true)\r\n    useEffect(() => {\r\n        (async () => {\r\n            setLoadingCorn(true)\r\n            try {\r\n                const result: TypeCornData[] = await loadCorn()\r\n                if (stores?.cornStore) {\r\n                    runInAction(() => {\r\n                        stores.cornStore.allCorn = result\r\n                    })\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message)\r\n            }\r\n            setLoadingCorn(false)\r\n        })()\r\n    }, [stores?.cornStore])\r\n\r\n    useEffect(() => {\r\n        (\r\n            async () => {\r\n                setLoadingSale(true)\r\n                const result: TypeSaleData[] = await loadSale()\r\n                console.log(result)\r\n                if (stores?.cornStore) {\r\n                    runInAction(() => {\r\n                        stores.cornStore.allSale = result\r\n                    })\r\n                }\r\n                setLoadingSale(false)\r\n            }\r\n        )()\r\n    }, [stores?.cornStore])\r\n\r\n    const optionsAllSale = {\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    stacked: true,\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                    },\r\n                },\r\n            ],\r\n            xAxes: [\r\n                {\r\n                    stacked: true,\r\n                },\r\n            ],\r\n        },\r\n    }\r\n\r\n    if (loadingSale && loadingCorn) return <MainLayout><Loader/></MainLayout>\r\n\r\n    return (\r\n        <MainLayout>\r\n            <h2>Панель приборов</h2>\r\n            <Grid container spacing={3} justifyContent={'center'}>\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    <CornStatic/>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={6}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Bar\r\n                                data={stores?.cornStore.getInfoSalesBar()}\r\n                                options={optionsAllSale}\r\n                            />\r\n                            <Typography variant=\"h5\" component=\"h2\">\r\n                                Продажи по месяцам\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                {/*<Grid item xs={12} sm={6} md={4}>*/}\r\n                {/*    <Card>*/}\r\n                {/*        <CardContent>*/}\r\n                {/*            */}\r\n                {/*        </CardContent>*/}\r\n                {/*    </Card>*/}\r\n                {/*</Grid>*/}\r\n            </Grid>\r\n        </MainLayout>\r\n    )\r\n})\r\n","export default __webpack_public_path__ + \"static/media/bg.e0d949e1.jpg\";","import React, {useContext, useState} from 'react'\r\nimport {Button, Container, Grid, TextField, Typography} from '@material-ui/core'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport bg from './images/bg.jpg'\r\nimport {login, register} from '../../api'\r\nimport StoreContext from '../../context/StoreContext'\r\nimport {observer} from 'mobx-react-lite'\r\nimport {TypeAuthData} from '../../types/auth'\r\n\r\ntype StorageType = {\r\n    userId: string | null\r\n    token: string | null\r\n}\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    grid: {\r\n        backgroundImage: `url(${bg})`,\r\n        height: '100vh',\r\n        backgroundPosition: 'center',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: 'cover',\r\n    },\r\n});\r\n\r\nexport const AuthPage = observer(() => {\r\n    const stores = useContext(StoreContext)\r\n    const classes = useStyles();\r\n    const [form, setForm] = useState<TypeAuthData>({\r\n        email: '',\r\n        password: ''\r\n    })\r\n\r\n    const changeHandler = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        setForm({...form, [event.target.name]: event.target.value})\r\n    }\r\n    const registerHandler = async () => {\r\n        try {\r\n            const result = await register(form)\r\n            stores?.userStore.enqueueSnackbar(result.message, 'success')\r\n        } catch (e) {\r\n            stores?.userStore.enqueueSnackbar(e.message, 'error')\r\n        }\r\n    }\r\n\r\n    const loginHandler = async () => {\r\n        try {\r\n            const result = await login(form)\r\n            const {token, userId} = result\r\n            localStorage.setItem('userData', JSON.stringify({\r\n                token, userId\r\n            } as StorageType))\r\n            if (stores?.userStore) {\r\n                stores.userStore.token = token\r\n                stores.userStore.userId = userId\r\n            }\r\n        } catch (e) {\r\n            stores?.userStore.enqueueSnackbar(e.message, 'error')\r\n        }\r\n\r\n    }\r\n    const style = {\r\n        bg: {\r\n            backgroundImage: `url(${bg})`,\r\n            height: '100vh',\r\n            backgroundPosition: 'center',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundSize: 'cover',\r\n        },\r\n        form: {\r\n            backgroundColor: 'rgba(255, 255, 255, .9)',\r\n            borderRadius: 10,\r\n            paddingTop: 10,\r\n            paddingBottom: 20\r\n        }\r\n    }\r\n    return (\r\n        <Grid className={classes.grid} container alignItems=\"center\">\r\n            <Container maxWidth=\"xs\" style={style.form}>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Добро пожаловать 👋\r\n                </Typography>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"email\"\r\n                    label=\"Почта\"\r\n                    name=\"email\"\r\n                    autoComplete=\"email\"\r\n                    autoFocus\r\n                    onChange={(event) => changeHandler(event)}\r\n                />\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"password\"\r\n                    label=\"Пароль\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                    onChange={(event) => changeHandler(event)}\r\n                />\r\n                <Grid container spacing={1} direction=\"column\">\r\n                    <Grid item>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={loginHandler}\r\n                        >\r\n                            Войти\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            onClick={registerHandler}\r\n                        >\r\n                            Зарегистрироваться\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </Grid>\r\n    )\r\n})\r\n","import React, {FC, useContext, useState} from 'react'\r\nimport {useFormik} from 'formik'\r\nimport {runInAction} from 'mobx'\r\nimport {Box, Button, Grid, TextField} from '@material-ui/core'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\r\nimport StoreContext from '../../../context/StoreContext'\r\nimport {addPoisons} from '../../../api'\r\nimport {TypePoisonsData, TypePoisonsForm} from '../../../types/poisons'\r\n\r\nexport const AddPoisons: FC = () => {\r\n    const stores = useContext(StoreContext)\r\n    const [loading, setLoading] = useState(false)\r\n    const poisonsFormik = useFormik<TypePoisonsForm>({\r\n        initialValues: {\r\n            name: '',\r\n            weight: 0,\r\n            cost: 0,\r\n            date: null\r\n        },\r\n        onSubmit: async (values) => {\r\n            setLoading(true)\r\n            try {\r\n                const result = await addPoisons(values)\r\n                const {poison} : {poison: TypePoisonsData} = result\r\n                if (stores?.cornStore) {\r\n                    runInAction(() => {\r\n                        stores.cornStore.allPoisons = [...stores.cornStore.allPoisons, ...[poison]]\r\n                    })\r\n                    stores.userStore.enqueueSnackbar(`${poison.name} добавлен`, 'success')\r\n                    poisonsFormik.resetForm()\r\n                }\r\n            } catch (e) {\r\n                console.log(e.message)\r\n            }\r\n            setLoading(false)\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={poisonsFormik.handleSubmit}>\r\n            <Grid container spacing={5}>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Название яда'} onChange={poisonsFormik.handleChange} name='name' type=\"text\"\r\n                               fullWidth/>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Объем(кг)'} onChange={poisonsFormik.handleChange} name='weight' type=\"number\"\r\n                               fullWidth/>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <TextField label={'Цена(руб)'} onChange={poisonsFormik.handleChange} name='cost' type=\"number\"\r\n                               fullWidth/>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <TextField\r\n                        id=\"date\"\r\n                        label=\"Дата продажи\"\r\n                        type=\"date\"\r\n                        onChange={poisonsFormik.handleChange}\r\n                        defaultValue={null}\r\n                        fullWidth\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Box my={3}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<CloudUploadIcon/>}\r\n                    type=\"submit\"\r\n                    disabled={loading}\r\n                >\r\n                    Добавить\r\n                </Button>\r\n            </Box>\r\n        </form>\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {TableCell, TableHead, TableRow} from '@material-ui/core/'\r\n\r\ntype MyProps = {\r\n    headData: string[]\r\n}\r\n\r\nexport const MyTableHead:FC<MyProps> = ({headData}) => {\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                {\r\n                    headData.map((text, index) =>\r\n                        <TableCell key={index}>{text}</TableCell>\r\n                    )\r\n                }\r\n            </TableRow>\r\n        </TableHead>\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {MyTableHead} from './components/MyTableHead'\r\nimport {Paper, Table, TableBody, TableContainer} from '@material-ui/core'\r\n\r\ntype MyProps = {\r\n    headData: string[]\r\n}\r\n\r\nexport const MyTable: FC<MyProps> = ({headData, children}) => {\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table size=\"small\" aria-label=\"a dense table\">\r\n                <MyTableHead\r\n                    headData={headData}\r\n                />\r\n                <TableBody>\r\n                    {children}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {observer} from 'mobx-react-lite'\r\nimport {runInAction} from 'mobx'\r\nimport {TableCell, TableRow} from '@material-ui/core'\r\nimport {MyTable} from '../../../components/Table/MyTable'\r\nimport StoreContext from '../../../context/StoreContext'\r\n\r\n\r\nexport const PoisonsTable = observer(() => {\r\n    const stores = useContext(StoreContext)\r\n    // FIXME подумать над дублированием и убрать any\r\n    const sortBy = (name: string) => {\r\n        runInAction(() => {\r\n            stores?.cornStore.allPoisons.sort((a: any, b: any) => a[name] < b[name] ? 1 : -1)\r\n        })\r\n    }\r\n    const sortByName = () => {\r\n        runInAction(() => {\r\n            stores?.cornStore.allPoisons.sort((a: any, b: any) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0))\r\n        })\r\n    }\r\n    if (!stores?.cornStore.allPoisons.length) {\r\n        return (\r\n            <p>Пусто</p>\r\n        )\r\n    }\r\n    return (\r\n        <MyTable\r\n            headData={['Название', 'Объем(кг)', 'Цена(руб)', 'Стоимость(кг/р)', 'Дата']}\r\n        >\r\n            {stores?.cornStore.allPoisons.map((item) => (\r\n                <TableRow key={item._id}>\r\n                    <TableCell>{item.name}</TableCell>\r\n                    <TableCell>{item.weight}</TableCell>\r\n                    <TableCell>{item.cost}</TableCell>\r\n                    <TableCell>{item.sum}</TableCell>\r\n                    <TableCell>{new Date(item.date).toLocaleDateString()}</TableCell>\r\n                </TableRow>\r\n            ))}\r\n        </MyTable>\r\n    )\r\n})\r\n","import React, {useContext, useEffect, useState} from 'react'\r\nimport {MainLayout} from '../../layouts/MainLayout/MainLayout'\r\nimport {Loader} from '../../components/Loader'\r\nimport {AddPoisons} from './components/AddPoisons'\r\nimport {PoisonsTable} from './components/PoisonsTable'\r\nimport {observer} from 'mobx-react-lite'\r\nimport {runInAction} from 'mobx'\r\nimport {Box, Button, Grid, Typography} from '@material-ui/core'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport StoreContext from '../../context/StoreContext'\r\nimport {loadPoisons} from '../../api'\r\nimport {TypePoisonsData} from '../../types/poisons'\r\n\r\n\r\nexport const PoisonsPage = observer(() => {\r\n    const stores = useContext(StoreContext)\r\n    const [loading, setLoading] = useState(false)\r\n    useEffect(() => {\r\n        (\r\n            async () => {\r\n                setLoading(true)\r\n                try {\r\n                    const result:TypePoisonsData[] = await loadPoisons()\r\n                    if(stores?.cornStore) {\r\n                        runInAction(() => {\r\n                            stores.cornStore.allPoisons = result\r\n                        })\r\n                    }\r\n                } catch (e) {\r\n                    console.log(e.message)\r\n                }\r\n                setLoading(false)\r\n            }\r\n        )()\r\n    }, [stores?.cornStore])\r\n\r\n    const [isShowForm, setIsShowForm] = useState<boolean>(false)\r\n    if (loading) {\r\n        return (\r\n            <MainLayout>\r\n                <Loader/>\r\n            </MainLayout>\r\n        )\r\n    }\r\n    return (\r\n        <MainLayout>\r\n            <Box my={5}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Typography variant=\"h2\" component=\"h1\">Яды</Typography>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={isShowForm ? <RemoveIcon/> : <AddCircleIcon/>}\r\n                        onClick={() => setIsShowForm(!isShowForm)}\r\n                    >\r\n                        {isShowForm ? 'Закрыть' : 'Добавить яд'}\r\n                    </Button>\r\n                </Grid>\r\n            </Box>\r\n            {isShowForm && <AddPoisons/>}\r\n            <PoisonsTable/>\r\n        </MainLayout>\r\n    )\r\n})\r\n","import React, {useContext} from 'react'\r\nimport {useFormik} from 'formik'\r\nimport {runInAction} from 'mobx'\r\nimport {Box, Button, Grid, TextField} from '@material-ui/core'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\r\nimport StoreContext from '../../../context/StoreContext'\r\nimport {addCorn} from '../../../api'\r\nimport {TypeCornData, TypeCornForm} from '../../../types/corn'\r\n\r\nexport const AddCorn = () => {\r\n    const stores = useContext(StoreContext)\r\n    const cornFormik = useFormik<TypeCornForm>({\r\n        initialValues: {\r\n            name: '',\r\n            weight: 0,\r\n            cost: 0\r\n        },\r\n        onSubmit: async (values) => {\r\n            try {\r\n                const result = await addCorn(values)\r\n                const {corn} : {corn: TypeCornData} = result\r\n                if (stores?.cornStore) {\r\n                    runInAction(() => {\r\n                        stores.cornStore.allCorn = [...stores?.cornStore.allCorn, ...[corn]]\r\n                    })\r\n                    stores.userStore.enqueueSnackbar(`${corn.name} - добавлено`, 'success')\r\n                }\r\n            } catch (e) {\r\n                stores?.userStore.enqueueSnackbar(e.message, 'error')\r\n            }\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={cornFormik.handleSubmit}>\r\n            <Grid container spacing={5}>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Название зерна'} onChange={cornFormik.handleChange} name='name' type=\"text\"\r\n                               fullWidth/>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Объем'} onChange={cornFormik.handleChange} name='weight' type=\"number\"\r\n                               fullWidth/>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Стоимость'} onChange={cornFormik.handleChange} name='cost' type=\"number\"\r\n                               fullWidth/>\r\n                </Grid>\r\n            </Grid>\r\n            <Box my={3}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<CloudUploadIcon/>}\r\n                    type=\"submit\"\r\n                >\r\n                    Добавить\r\n                </Button>\r\n            </Box>\r\n        </form>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {observer} from 'mobx-react-lite'\r\nimport {runInAction} from 'mobx'\r\nimport {TableCell, TableRow} from '@material-ui/core'\r\nimport {MyTable} from '../../../components/Table/MyTable'\r\nimport StoreContext from '../../../context/StoreContext'\r\n\r\nexport const CornTable = observer(() => {\r\n    const stores = useContext(StoreContext)\r\n    const sortBy = (name: string) => {\r\n        runInAction(() => {\r\n            stores?.cornStore.allCorn.sort((a: any, b: any) => a[name] < b[name] ? 1 : -1)\r\n        })\r\n    }\r\n    const sortByName = () => {\r\n        runInAction(() => {\r\n            stores?.cornStore.allCorn.sort((a: any, b: any) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0))\r\n        })\r\n    }\r\n    if (!stores?.cornStore.allCorn.length) {\r\n        return <p>Пусто</p>\r\n    }\r\n    return (\r\n        <MyTable\r\n            headData={['Название','Объем','Стоимость']}\r\n        >\r\n            {stores?.cornStore.allCorn.map((item, index) => (\r\n                <TableRow key={index}>\r\n                    <TableCell>{item.name}</TableCell>\r\n                    <TableCell>{item.weight}</TableCell>\r\n                    <TableCell>{item.cost}</TableCell>\r\n                </TableRow>\r\n            ))}\r\n        </MyTable>\r\n    )\r\n})\r\n","import React, {useState} from 'react'\r\nimport {MainLayout} from '../../layouts/MainLayout/MainLayout'\r\nimport {AddCorn} from './components/AddCorn'\r\nimport {CornTable} from './components/CornTable'\r\nimport {Box, Button, Grid, Typography} from '@material-ui/core'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport {observer} from 'mobx-react-lite'\r\n\r\nexport const CornPage = observer(() => {\r\n    const [isShowForm, setIsShowForm] = useState(false)\r\n    return (\r\n        <MainLayout>\r\n            <Box my={5}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Typography variant=\"h2\" component=\"h1\">Зерно</Typography>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={isShowForm ? <RemoveIcon/> : <AddCircleIcon/>}\r\n                        onClick={() => setIsShowForm(!isShowForm)}\r\n                    >\r\n                        {isShowForm ? 'Закрыть' : 'Добавить культуру'}\r\n                    </Button>\r\n                </Grid>\r\n            </Box>\r\n\r\n            {isShowForm && <AddCorn/>}\r\n            <CornTable/>\r\n        </MainLayout>\r\n    )\r\n})\r\n","import React, {useContext, useState} from 'react'\r\nimport {useFormik} from 'formik'\r\nimport {runInAction} from 'mobx'\r\nimport {observer} from 'mobx-react-lite'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\r\nimport {Box, Button, Grid, InputLabel, MenuItem, Select, TextField} from '@material-ui/core'\r\nimport StoreContext from '../../../context/StoreContext'\r\nimport {addSale} from '../../../api'\r\nimport {TypeSaleData, TypeSaleForm} from '../../../types/sale'\r\nimport {TypeCornData} from '../../../types/corn'\r\n\r\nexport const AddSale = observer(() => {\r\n    const stores = useContext(StoreContext)\r\n    const [loading, setLoading] = useState(false)\r\n    const saleFormik = useFormik<TypeSaleForm>({\r\n        initialValues: {\r\n            _id: stores?.cornStore.allCorn[0]._id,\r\n            weight: 0,\r\n            date: null\r\n        },\r\n        onSubmit: async (values) => {\r\n            setLoading(true)\r\n            try {\r\n                const result = await addSale(values)\r\n                const {sale, updateCorn} : {sale: TypeSaleData, updateCorn: TypeCornData} = result\r\n                if (stores?.cornStore) {\r\n                    runInAction(() => {\r\n                        stores.cornStore.allSale = [...stores.cornStore.allSale, ...[sale]]\r\n                    })\r\n                    setCorn(updateCorn)\r\n                    stores.userStore.enqueueSnackbar(result.message, 'success')\r\n                }\r\n            } catch (e) {\r\n                stores?.userStore.enqueueSnackbar(e.message, 'error')\r\n            }\r\n            setLoading(false)\r\n        }\r\n    })\r\n\r\n    const setCorn = (updateCorn:TypeCornData) => {\r\n        const indexSearch = stores?.cornStore.allCorn.findIndex(item => item._id === updateCorn._id)\r\n        if (indexSearch && indexSearch !== -1 && stores?.cornStore) {\r\n            runInAction(() => {\r\n                stores.cornStore.allCorn[indexSearch] = updateCorn\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={saleFormik.handleSubmit}>\r\n            <Grid container spacing={5}>\r\n                <Grid item xs={4}>\r\n                    <InputLabel id=\"selectLabel\">Выберите зерно</InputLabel>\r\n                    <Select labelId=\"selectLabel\" id=\"select\" defaultValue={stores?.cornStore.allCorn[0]._id} name='_id'\r\n                            onChange={event => saleFormik.setFieldValue('_id', event.target.value)}\r\n                            fullWidth>\r\n                        {\r\n                            stores?.cornStore.allCorn && stores.cornStore.allCorn.map(({_id, name, cost, weight}) =>\r\n                                <MenuItem value={_id} key={_id}>{`${name}(${cost}₽, ${weight}кг)`}</MenuItem>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Объем'} onChange={saleFormik.handleChange} name='weight' type=\"number\"\r\n                               fullWidth/>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TextField\r\n                        id=\"date\"\r\n                        label=\"Дата продажи\"\r\n                        type=\"date\"\r\n                        onChange={saleFormik.handleChange}\r\n                        defaultValue={null}\r\n                        fullWidth\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Box my={3}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<CloudUploadIcon/>}\r\n                    type=\"submit\"\r\n                    disabled={loading}\r\n                >\r\n                    Добавить\r\n                </Button>\r\n            </Box>\r\n        </form>\r\n    )\r\n})\r\n","import React, {useContext} from 'react'\r\nimport {observer} from 'mobx-react-lite'\r\nimport {TableCell, TableRow} from '@material-ui/core'\r\nimport {MyTable} from '../../../components/Table/MyTable'\r\nimport StoreContext from '../../../context/StoreContext'\r\n\r\nexport const SaleTable = observer(() => {\r\n    const stores = useContext(StoreContext)\r\n    return(\r\n        <MyTable\r\n            headData={['Название','Объем','Сумма', 'Дата']}\r\n        >\r\n            {stores?.cornStore.allSale.map((item) => (\r\n                <TableRow key={item._id}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                        {item.name}\r\n                    </TableCell>\r\n                    <TableCell>{item.weight}</TableCell>\r\n                    <TableCell>{item.sum}</TableCell>\r\n                    <TableCell>{new Date(item.date).toLocaleDateString()}</TableCell>\r\n                </TableRow>\r\n            ))}\r\n        </MyTable>\r\n    )\r\n})\r\n","import React, {useContext, useEffect, useState} from 'react'\r\nimport {MainLayout} from '../../layouts/MainLayout/MainLayout'\r\nimport {AddSale} from './components/AddSale'\r\nimport {SaleTable} from './components/SaleTable'\r\nimport {runInAction} from 'mobx'\r\nimport {Loader} from '../../components/Loader'\r\nimport {observer} from 'mobx-react-lite'\r\nimport {Box, Button, Grid, Typography} from '@material-ui/core'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport StoreContext from '../../context/StoreContext'\r\nimport {loadSale} from '../../api'\r\n\r\nexport const SalePage = observer(() => {\r\n    const stores = useContext(StoreContext)\r\n    const [isShowForm, setIsShowForm] = useState(false)\r\n\r\n    return(\r\n        <MainLayout>\r\n            <Box my={5}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Typography variant=\"h2\" component=\"h1\">Продажи</Typography>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={isShowForm ? <RemoveIcon/> : <AddCircleIcon/>}\r\n                        onClick={() => setIsShowForm(!isShowForm)}\r\n                    >\r\n                        {isShowForm ? 'Закрыть' : 'Добавить продажу'}\r\n                    </Button>\r\n                </Grid>\r\n            </Box>\r\n            {isShowForm && <AddSale/>}\r\n            <SaleTable/>\r\n        </MainLayout>\r\n    )\r\n})\r\n","import React, {useContext} from 'react'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {DashboardPage} from './pages/DashboardPage/DashboardPage'\r\nimport {AuthPage} from './pages/AuthPage/AuthPage'\r\nimport {PoisonsPage} from './pages/PoisonsPage/PoisonsPage'\r\nimport {CornPage} from './pages/CornPage/CornPage'\r\nimport {SalePage} from './pages/SalePage/SalePage'\r\nimport StoreContext from './context/StoreContext'\r\nimport {observer} from 'mobx-react-lite'\r\n\r\nexport const Routes = observer(() => {\r\n    const stores = useContext(StoreContext)\r\n    if (!!stores?.userStore.token) {\r\n        return (\r\n            <Switch>\r\n                <Route exact path={'/'} component={DashboardPage}/>\r\n                <Route exact path={'/poisons'} component={PoisonsPage}/>\r\n                <Route exact path={'/corn'} component={CornPage}/>\r\n                <Route exact path={'/sale'} component={SalePage}/>\r\n                <Redirect to='/'/>\r\n            </Switch>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path={'/login'} component={AuthPage}/>\r\n            <Redirect to='/login'/>\r\n        </Switch>\r\n    )\r\n})\r\n","import {useContext, useEffect} from 'react'\r\nimport StoreContext from '../context/StoreContext'\r\nimport {useSnackbar} from 'notistack'\r\nimport {observer} from 'mobx-react-lite'\r\nimport {autorun} from 'mobx'\r\nimport {TypeNotification} from '../types/types'\r\n\r\nexport const Notifier = observer(() => {\r\n    const stores = useContext(StoreContext)\r\n    const {enqueueSnackbar} = useSnackbar()\r\n    let displayed: number[] = []\r\n\r\n    const storeDisplayed = (id: number) => {\r\n        displayed = [...displayed, id]\r\n    }\r\n\r\n    useEffect(() => {\r\n        autorun(() => {\r\n            if (stores?.userStore) {\r\n                const notifications: TypeNotification[] = stores.userStore.notifications\r\n                notifications.forEach((notification: TypeNotification) => {\r\n                    if (displayed.includes(notification.key)) return\r\n                    enqueueSnackbar(notification.message, notification.options)\r\n                    storeDisplayed(notification.key)\r\n                    stores.userStore.removeSnackbar(notification.key)\r\n                })\r\n            }\r\n        })\r\n\r\n    }, [stores?.userStore.notifications])\r\n    return null\r\n})","import React, {useContext, useEffect, useCallback} from 'react'\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport {observer} from 'mobx-react-lite'\r\nimport {Routes} from './Routes'\r\nimport StoreContext from './context/StoreContext'\r\nimport {Notifier} from './components/Notifier'\r\n\r\ntype localStorageType = {\r\n    token: string\r\n    userId: string\r\n}\r\n\r\n\r\nconst App = observer(() => {\r\n    const stores = useContext(StoreContext)\r\n    const checkAuth = useCallback(() => {\r\n        const storage: string | null = localStorage.getItem('userData')\r\n        if (!storage) {\r\n            return\r\n        }\r\n        const storageObj: localStorageType = JSON.parse(storage)\r\n        const {token, userId} = storageObj\r\n        if (stores) {\r\n            stores.userStore.token = token\r\n            stores.userStore.userId = userId\r\n        }\r\n    }, [stores])\r\n\r\n    useEffect(() => {\r\n        checkAuth()\r\n    }, [checkAuth])\r\n    return (\r\n        <>\r\n            <Notifier/>\r\n            <Router>\r\n                <Routes/>\r\n            </Router>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default App\r\n","import {ReportHandler} from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {makeAutoObservable} from 'mobx'\r\nimport {TypeNotification} from '../types/types'\r\n\r\nclass CornStore {\r\n\r\n    token: string | null = null\r\n    userId: string | null = null\r\n    ready: boolean = false\r\n    notifications: TypeNotification[] = []\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    enqueueSnackbar = (message: string = 'Тут должно быть что-то важное', variant: 'success' | 'error' | 'warning' | 'info' = 'info') => {\r\n        const note: TypeNotification = {\r\n            key: new Date().getTime() + Math.random(),\r\n            message,\r\n            options: {\r\n                variant\r\n            },\r\n        }\r\n        this.notifications.push(note)\r\n    }\r\n\r\n    removeSnackbar = (key: number) => {\r\n        this.notifications = this.notifications.filter((notification: TypeNotification) => notification.key !== key)\r\n    }\r\n}\r\n\r\n\r\nexport default CornStore\r\n","import {makeAutoObservable, toJS} from 'mobx'\r\nimport {TypeCornData} from '../types/corn'\r\nimport {TypePoisonsData} from '../types/poisons'\r\nimport {TypeSaleData} from '../types/sale'\r\nimport {MobXGlobals} from 'mobx/dist/core/globalstate'\r\n\r\nclass CornStore {\r\n\r\n    allCorn: TypeCornData[] | [] = []\r\n    allPoisons: TypePoisonsData[] | [] = []\r\n    allSale: TypeSaleData[] | [] = []\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    // Нужно получить массив продаж конктреной корн\r\n    //\r\n\r\n    getInfoSalesBar = () => {\r\n        const datasets = this.allCorn.map(((corn) => {\r\n            const data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n            const sales: TypeSaleData[] = this.allSale.filter((sale) => sale.name === corn.name)\r\n            sales.map((sale) => {\r\n                const month = new Date(sale.date).getMonth()\r\n                data[month] += sale.weight\r\n            })\r\n            return {\r\n                label: corn.name,\r\n                data,\r\n                backgroundColor: corn.color\r\n            }\r\n        }))\r\n        console.log(datasets)\r\n        return {\r\n            labels: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\r\n            datasets\r\n        }\r\n    }\r\n\r\n    getAllName = () => {\r\n        const result: Array<string> = this.allCorn.map(item => {\r\n            return item.name\r\n        })\r\n        return result\r\n    }\r\n\r\n    getAllWeight = () => {\r\n        const result: Array<number> = this.allCorn.map(item => {\r\n            return item.weight\r\n        })\r\n        return result\r\n    }\r\n\r\n    getAllColor = (index: number) => {\r\n        const result: Array<string> = this.allCorn.map(item => {\r\n            return item.color[index]\r\n        })\r\n        return result\r\n    }\r\n}\r\n\r\n\r\nexport default CornStore\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport {SnackbarProvider} from 'notistack'\r\nimport StoreContext from './context/StoreContext'\r\nimport RootStore from './store/RootStore'\r\n\r\nconst rootStore = new RootStore()\r\nReactDOM.render(\r\n    // <React.StrictMode>\r\n    <StoreContext.Provider\r\n        value={{\r\n            rootStore: rootStore,\r\n            userStore: rootStore.userStore,\r\n            cornStore: rootStore.cornStore\r\n        }}\r\n    >\r\n        <SnackbarProvider\r\n            anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            iconVariant={{\r\n                success: '✅',\r\n                error: '✖️',\r\n                warning: '⚠️',\r\n                info: 'ℹ️',\r\n            }}\r\n        >\r\n            <App/>\r\n        </SnackbarProvider>\r\n    </StoreContext.Provider>,\r\n    // </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\nreportWebVitals()\r\n","import UserStore from './UserStore'\r\nimport CornStore from './CornStore'\r\n\r\nclass RootStore {\r\n    userStore: UserStore\r\n    cornStore: CornStore\r\n\r\n    constructor() {\r\n        this.userStore = new UserStore()\r\n        this.cornStore = new CornStore()\r\n    }\r\n}\r\n\r\nexport default RootStore\r\n"],"sourceRoot":""}