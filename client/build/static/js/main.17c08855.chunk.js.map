{"version":3,"sources":["context/AuthContext.ts","context/RequestContext.ts","store/UserStore.ts","hooks/auth.hook.js.ts","components/Loader/Loader.tsx","assets/images/logo.png","containers/Sidebar/components/Header.tsx","containers/Sidebar/components/MenuList.tsx","containers/Sidebar/Sidebar.tsx","containers/Header/Header.tsx","layouts/MainLayout/MainLayout.tsx","components/CardMetric/CardMetric.tsx","store/CornStore.ts","components/CornStatic.tsx","pages/DashboardPage.tsx","hooks/http.hook.ts","pages/AuthPage/images/bg.jpg","pages/AuthPage/AuthPage.tsx","components/AddPoisons/AddPoisons.tsx","components/Table/components/MyTableHead.tsx","components/Table/MyTable.tsx","components/PoisonsTable.tsx","pages/PoisonsPage.tsx","components/AddCorn.tsx","components/CornTable.tsx","pages/CornPage.tsx","components/AddSale.tsx","components/SaleTable.tsx","pages/SalePage.tsx","App.tsx","routes.tsx","request/MainRequests.ts","reportWebVitals.ts","index.tsx"],"names":["noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","RequestContext","loadingCorn","ready","makeAutoObservable","this","storageName","Loader","className","Header","Box","component","px","py","to","Grid","container","spacing","alignItems","item","xs","Avatar","alt","src","logo","Typography","variant","MenuList","List","ListItem","button","Link","ListItemIcon","ListItemText","primary","Sidebar","state","openSidebar","setOpenSidebar","Drawer","open","onClose","event","auth","useContext","classes","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","title","color","useStyles","useState","AppBar","position","Toolbar","IconButton","edge","onClick","Button","startIcon","MainLayout","children","CardMetric","text","col","allCorn","allPoisons","allSale","getAllName","map","name","getAllWeight","weight","getAllColor","index","CornStatic","observer","data","CornStore","length","labels","datasets","backgroundColor","borderColor","borderWidth","DashboardPage","req","useEffect","label","options","scales","yAxes","stacked","ticks","beginAtZero","xAxes","fill","useHttp","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","ok","Error","message","clearError","AuthPage","email","password","form","setForm","enqueueSnackbar","useSnackbar","changeHandler","target","value","registerHandler","loginHandler","style","bg","backgroundImage","height","backgroundPosition","backgroundRepeat","backgroundSize","borderRadius","paddingTop","paddingBottom","Container","maxWidth","TextField","margin","required","fullWidth","id","autoComplete","autoFocus","onChange","type","direction","disabled","AddPoisons","poisonsFormik","useFormik","initialValues","cost","date","onSubmit","values","addHandler","resetForm","Authorization","poison","runInAction","handleSubmit","handleChange","my","MyTableHead","headData","TableHead","TableRow","TableCell","MyTable","TableContainer","Paper","Table","size","TableBody","PoisonsTable","sum","Date","toLocaleDateString","_id","PoisonsPage","fetchPoisons","fetched","isShowForm","setIsShowForm","justifyContent","AddCorn","cornFormik","console","log","corn","CornTable","CornPage","AddSale","saleFormik","sale","toJS","InputLabel","Select","labelId","defaultValue","setFieldValue","MenuItem","InputLabelProps","shrink","SaleTable","scope","SalePage","fetchSale","App","jwtToken","UserStore","localStorage","setItem","removeItem","local","getItem","parse","useAuth","routes","exact","path","useRoutes","MainRequest","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","anchorOrigin","vertical","horizontal","iconVariant","success","warning","info","document","getElementById"],"mappings":"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","file":"static/js/main.17c08855.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nfunction noop() {}\r\n\r\ntype TypeContext = {\r\n    token: null | string\r\n    userId: null | string\r\n    login: (jwtToken: string, id: string) => void\r\n    logout: () => void\r\n    isAuthenticated: boolean\r\n}\r\n\r\nexport const AuthContext = createContext({\r\n    token: null,\r\n    userId: null,\r\n    login: noop,\r\n    logout: noop,\r\n    isAuthenticated: false\r\n} as TypeContext)\r\n","import {createContext} from 'react'\r\n\r\nfunction noop() {}\r\n\r\ntype TypeContext = {\r\n    loadingCorn: () => void\r\n}\r\nexport const RequestContext = createContext({\r\n    loadingCorn: noop\r\n} as TypeContext)\r\n","import {makeAutoObservable} from 'mobx'\r\n\r\nclass CornStore {\r\n\r\n    token:string | null = null\r\n    userId: string | null = null\r\n    ready: boolean = false\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default new CornStore()\r\n","import {useCallback, useEffect} from 'react'\r\nimport UserStore from '../store/UserStore'\r\n\r\nconst storageName: string = 'userData'\r\n\r\ntype StorageType = {\r\n    userId: string | null\r\n    token: string | null\r\n}\r\n\r\nexport const useAuth = () => {\r\n\r\n    const login = useCallback((jwtToken: string, id: string) => {\r\n        UserStore.token = jwtToken\r\n        UserStore.userId = id\r\n        localStorage.setItem(storageName, JSON.stringify({\r\n            userId: id, token: jwtToken\r\n        } as StorageType))\r\n    }, [])\r\n    const logout = useCallback(() => {\r\n        UserStore.token = null\r\n        UserStore.userId = null\r\n        localStorage.removeItem(storageName)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const local = localStorage.getItem(storageName) || '{}'\r\n        const data = JSON.parse(local)\r\n        if (data && data.token) {\r\n            const data = JSON.parse(local)\r\n            login(data.token, data.userId)\r\n        }\r\n        UserStore.ready = true\r\n    }, [login])\r\n\r\n    return {login, logout}\r\n}\r\n","import React from 'react'\r\n\r\nexport const Loader = () => {\r\n    return(\r\n        <div className=\"preloader-wrapper big active\">\r\n            <div className=\"spinner-layer spinner-blue\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.863bdabf.png\";","import React from 'react'\r\nimport {Box, Grid, Typography} from '@material-ui/core'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport logo from '../../../assets/images/logo.png'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Box component='div' px={5} py={3}>\r\n            <Link to='/'>\r\n                <Grid container spacing={3} alignItems=\"center\">\r\n                    <Grid item xs={4}>\r\n                        <Avatar alt=\"Компания\" src={logo}/>\r\n                    </Grid>\r\n                    <Grid item xs={8}>\r\n                        <Typography variant=\"h5\" component=\"h5\">\r\n                            Компания\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Link>\r\n        </Box>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {List, ListItem, ListItemIcon, ListItemText} from '@material-ui/core'\r\nimport {Link} from 'react-router-dom'\r\nimport ToysIcon from '@material-ui/icons/Toys'\r\nimport BugReportIcon from '@material-ui/icons/BugReport'\r\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn'\r\n\r\nexport const MenuList = () => {\r\n    return(\r\n        <List>\r\n            <ListItem button component={Link} to={'/corn'}>\r\n                <ListItemIcon><ToysIcon/></ListItemIcon>\r\n                <ListItemText primary={'Зерно'}/>\r\n            </ListItem>\r\n            <ListItem button component={Link} to={'/poisons'}>\r\n                <ListItemIcon><BugReportIcon/></ListItemIcon>\r\n                <ListItemText primary={'Яды'}/>\r\n            </ListItem>\r\n\r\n            <ListItem button component={Link} to={'/sale'}>\r\n                <ListItemIcon><MonetizationOnIcon/></ListItemIcon>\r\n                <ListItemText primary={'Продажи'}/>\r\n            </ListItem>\r\n        </List>\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {Drawer} from '@material-ui/core'\r\nimport {Header} from './components/Header'\r\nimport {MenuList} from './components/MenuList'\r\n\r\ntype MyProps = {\r\n    openSidebar: boolean\r\n    setOpenSidebar: (x: boolean) => void\r\n}\r\n\r\n\r\nexport const Sidebar: FC<MyProps> = ({openSidebar, setOpenSidebar}) => {\r\n\r\n    const setState = (state: boolean) => (\r\n        event: React.KeyboardEvent | React.MouseEvent,\r\n    ) => {\r\n        setOpenSidebar(state)\r\n    }\r\n\r\n    return (\r\n        <Drawer open={openSidebar} onClose={setState(false)}>\r\n            <Header/>\r\n            <MenuList/>\r\n        </Drawer>\r\n    )\r\n}\r\n","import React, {FC, useContext, useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {AuthContext} from '../../context/AuthContext'\r\nimport {AppBar, Button, IconButton, Toolbar, Typography} from '@material-ui/core'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport {Sidebar} from '../Sidebar/Sidebar'\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\r\n\r\n\r\nexport const Header: FC = () => {\r\n    const auth = useContext(AuthContext)\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                flexGrow: 1,\r\n            },\r\n            menuButton: {\r\n                marginRight: theme.spacing(2),\r\n            },\r\n            title: {\r\n                flexGrow: 1,\r\n                color: '#fff'\r\n            },\r\n        }),\r\n    )\r\n    const classes = useStyles()\r\n    const [openSidebar, setOpenSidebar] = useState<boolean>(false)\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => setOpenSidebar(!openSidebar)}>\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography component={Link} to={'/'} variant=\"h6\" className={classes.title}>\r\n                        Компания\r\n                    </Typography>\r\n                    <Button startIcon={<ExitToAppIcon/>} color=\"inherit\" onClick={() => auth.logout()}>Выйти</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Sidebar openSidebar={openSidebar} setOpenSidebar={setOpenSidebar}/>\r\n        </>\r\n        // <div>\r\n        //     <nav className='light-blue lighten-5 black-text'>\r\n        //         <div className=\"nav-wrapper\">\r\n        //             <ul className=\"left hide-on-med-and-down\">\r\n        //                 <li><span onClick={() => setIsShow(!isShow)}><i className=\"material-icons\"\r\n        //                                                                 style={styleMenu}>menu</i></span></li>\r\n        //             </ul>\r\n        //             <ul className='right hide-on-med-and-down'>\r\n        //                 <li>\r\n        //                     <a href='#!' className='black-text' onClick={() => auth.logout()}>Выйти</a>\r\n        //                 </li>\r\n        //                 <li>\r\n        //                     <Link className='black-text' to='/add-corn'>Зерно</Link>\r\n        //                 </li>\r\n        //                 <li>\r\n        //                     <Link className='black-text' to='/poisons'>Яды</Link>\r\n        //                 </li>\r\n        //                 <li>\r\n        //                     <Link className='black-text' to='/add-sale'>Продажи</Link>\r\n        //                 </li>\r\n        //             </ul>\r\n        //         </div>\r\n        //     </nav>\r\n        // </div>\r\n\r\n\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {Header} from '../../containers/Header/Header'\r\n\r\nexport const MainLayout: FC = ({children}) => {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <div className='container'>\r\n                {children}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\n\r\ntype TypeMyProps = {\r\n    text: string | null\r\n    col: number\r\n}\r\nexport const CardMetric:FC<TypeMyProps> = ({text, col, children}) => {\r\n    return (\r\n        <div className={`col s${col}`}>\r\n            <div className=\"card\">\r\n                <div className=\"card-image\">\r\n                    {children}\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    {text && <p>{text}</p>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {makeAutoObservable} from 'mobx'\r\nimport {TypeCorn, TypePoisons, TypeSale} from '../types/types'\r\n\r\nclass CornStore {\r\n\r\n    allCorn:TypeCorn[] | [] = []\r\n    allPoisons: TypePoisons[] | [] = []\r\n    allSale: TypeSale[] | [] = []\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    getAllName = () => {\r\n        const result: Array<string> = this.allCorn.map(item => {\r\n            return item.name\r\n        })\r\n        return result\r\n    }\r\n\r\n    getAllWeight = () => {\r\n        const result: Array<number> = this.allCorn.map(item => {\r\n            return item.weight\r\n        })\r\n        return result\r\n    }\r\n\r\n    getAllColor = (index: number) => {\r\n        const result: Array<string> = this.allCorn.map(item => {\r\n            return item.color[index]\r\n        })\r\n        return result\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default new CornStore()\r\n","import React from 'react'\r\nimport {Pie} from 'react-chartjs-2/dist'\r\nimport {CardMetric} from './CardMetric/CardMetric'\r\nimport CornStore from '../store/CornStore'\r\nimport {observer} from 'mobx-react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport const CornStatic = observer(() => {\r\n    const data = CornStore.allCorn.length ? {\r\n        labels: CornStore.getAllName(),\r\n        datasets: [\r\n            {\r\n                data: CornStore.getAllWeight(),\r\n                backgroundColor: CornStore.getAllColor(0),\r\n                borderColor: CornStore.getAllColor(1),\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    } : {}\r\n    return (\r\n        <CardMetric\r\n            text={'Общее количество зерна'}\r\n            col={3}\r\n        >\r\n            {CornStore.allCorn.length ? (\r\n                <Pie\r\n                    data={data}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <p>Для начала заполните данные</p>\r\n                    <Link to='/add-corn'>Заполнить</Link>\r\n                </>\r\n            )}\r\n\r\n        </CardMetric>\r\n    )\r\n})\r\n","import React, {useContext, useEffect} from 'react'\r\nimport {MainLayout} from '../layouts/MainLayout/MainLayout'\r\nimport {CardMetric} from '../components/CardMetric/CardMetric'\r\nimport {Bar, Line} from 'react-chartjs-2/dist'\r\nimport {observer} from 'mobx-react'\r\nimport {CornStatic} from '../components/CornStatic'\r\nimport {RequestContext} from '../context/RequestContext'\r\n\r\nexport const DashboardPage = observer(() => {\r\n    const req = useContext(RequestContext)\r\n    useEffect(() => {\r\n        req.loadingCorn()\r\n    }, [])\r\n\r\n    const allSale = {\r\n        labels: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октрябрь', 'Ноябрь', 'Декабрь'],\r\n        datasets: [\r\n            {\r\n                label: 'Рожь',\r\n                data: [5, 19, 3, 5, 2, 3, 5, 9, 4, 6, 7, 15],\r\n                backgroundColor: 'rgba(255, 99, 132, 1)',\r\n            },\r\n            {\r\n                label: 'Пшеница',\r\n                data: [8, 15, 7, 5, 2, 5, 7, 9, 4, 6, 6, 10],\r\n                backgroundColor: 'rgba(54, 162, 235, 1)',\r\n            },\r\n            {\r\n                label: 'Ячмень',\r\n                data: [4, 11, 3, 5, 2, 4, 6, 9, 4, 7, 7, 11],\r\n                backgroundColor: 'rgba(255, 206, 86, 1)',\r\n            },\r\n        ],\r\n    }\r\n\r\n    const optionsAllSale = {\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    stacked: true,\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                    },\r\n                },\r\n            ],\r\n            xAxes: [\r\n                {\r\n                    stacked: true,\r\n                },\r\n            ],\r\n        },\r\n    }\r\n\r\n    const harvesting = {\r\n        labels: ['Июнь', 'Июль', 'Август'],\r\n        datasets: [\r\n            {\r\n                label: 'ГА',\r\n                data: [200, 300, 250],\r\n                fill: false,\r\n                backgroundColor: 'rgb(255, 99, 132)',\r\n                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n            },\r\n        ],\r\n    }\r\n\r\n    const optionsHarvesting = {\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n    }\r\n\r\n    return (\r\n        <MainLayout>\r\n            <h2>Панель приборов</h2>\r\n            <div className='row'>\r\n                <CornStatic/>\r\n                <CardMetric\r\n                    text={'Продажи по месяцам'}\r\n                    col={6}\r\n                >\r\n                    <Bar\r\n                        data={allSale}\r\n                        options={optionsAllSale}\r\n                    />\r\n                </CardMetric>\r\n                <CardMetric text={'Уборка ГА за месяц'} col={3}>\r\n                    <Line data={harvesting} options={optionsHarvesting}/>\r\n                </CardMetric>\r\n            </div>\r\n        </MainLayout>\r\n    )\r\n})\r\n","import {useCallback, useState} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [error, setError] = useState<boolean | null>(null)\r\n\r\n    const request = useCallback(async (url: string, method: string = 'GET', body = null, headers: any = {}) => {\r\n        setLoading(true)\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n\r\n            const response = await fetch(url, {method, body, headers})\r\n            const data = await response.json()\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n            setLoading(false)\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n}\r\n","export default __webpack_public_path__ + \"static/media/bg.e0d949e1.jpg\";","import React, {useContext, useEffect, useState} from 'react'\r\nimport {useHttp} from '../../hooks/http.hook'\r\nimport {AuthContext} from '../../context/AuthContext'\r\nimport {useMessage} from '../../hooks/message.hook'\r\nimport {Button, Container, Grid, TextField, Typography} from '@material-ui/core'\r\nimport { useSnackbar } from 'notistack'\r\nimport bg from './images/bg.jpg'\r\n\r\ntype FormType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nexport const AuthPage = () => {\r\n    const [form, setForm] = useState<FormType>({\r\n        email: '',\r\n        password: ''\r\n    })\r\n\r\n    const { enqueueSnackbar } = useSnackbar()\r\n\r\n    const changeHandler = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        setForm({...form, [event.target.name]: event.target.value})\r\n    }\r\n    const auth = useContext(AuthContext)\r\n    const {loading, request, error, clearError} = useHttp()\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/register', 'POST', {...form})\r\n\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    const loginHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/login', 'POST', {...form})\r\n            auth.login(data.token, data.userId)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (error) enqueueSnackbar(error, {\r\n            variant: 'error',\r\n        })\r\n        clearError()\r\n    }, [error, enqueueSnackbar, clearError])\r\n    const style = {\r\n        bg: {\r\n            backgroundImage: `url(${bg})`,\r\n            height: '100vh',\r\n            backgroundPosition: 'center',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundSize: 'cover',\r\n        },\r\n        form: {\r\n            backgroundColor: 'rgba(255, 255, 255, .9)',\r\n            borderRadius: 10,\r\n            paddingTop: 10,\r\n            paddingBottom: 20\r\n        }\r\n    }\r\n    return (\r\n        <Grid style={style.bg} container alignItems=\"center\">\r\n            <Container maxWidth=\"xs\" style={style.form}>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Добро пожаловать 👋\r\n                </Typography>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"email\"\r\n                    label=\"Почта\"\r\n                    name=\"email\"\r\n                    autoComplete=\"email\"\r\n                    autoFocus\r\n                    onChange={(event) => changeHandler(event)}\r\n                />\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"password\"\r\n                    label=\"Пароль\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                    onChange={(event) => changeHandler(event)}\r\n                />\r\n                <Grid container spacing={1} direction=\"column\">\r\n                    <Grid item>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={loginHandler}\r\n                            disabled={loading}\r\n                        >\r\n                            Войти\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            onClick={registerHandler}\r\n                            disabled={loading}\r\n                        >\r\n                            Зарегистрироваться\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </Grid>\r\n    )\r\n}\r\n","import React, {FC, useContext} from 'react'\r\nimport {useHttp} from '../../hooks/http.hook'\r\nimport {AuthContext} from '../../context/AuthContext'\r\nimport {useFormik} from 'formik'\r\nimport {Loader} from '../Loader/Loader'\r\nimport {useMessage} from '../../hooks/message.hook'\r\nimport CornStore from '../../store/CornStore'\r\nimport {runInAction} from 'mobx'\r\nimport {Box, Button, Grid, TextField} from '@material-ui/core'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\r\nimport {useSnackbar} from 'notistack'\r\n\r\ntype TypeForm = {\r\n    name: string\r\n    weight: number\r\n    cost: number\r\n    date: Date | null\r\n}\r\n\r\nexport const AddPoisons: FC = () => {\r\n    const { enqueueSnackbar } = useSnackbar()\r\n    const poisonsFormik = useFormik<TypeForm>({\r\n        initialValues: {\r\n            name: '',\r\n            weight: 0,\r\n            cost: 0,\r\n            date: null\r\n        },\r\n        onSubmit: async (values) => {\r\n            await addHandler(values)\r\n            poisonsFormik.resetForm()\r\n        }\r\n    })\r\n    const auth = useContext(AuthContext)\r\n    const {loading, request} = useHttp()\r\n    const addHandler = async (values: TypeForm) => {\r\n        try {\r\n            const data = await request('/api/poisons/add', 'POST', {...values}, {\r\n                Authorization: `Bearer: ${auth.token}`\r\n            })\r\n            const {poison} = data\r\n            runInAction(() => {\r\n                CornStore.allPoisons = [...CornStore.allPoisons, ...[poison]]\r\n            })\r\n            enqueueSnackbar(`${poison.name} добавлен`, {\r\n                variant: 'success',\r\n            })\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\n    return (\r\n        <form onSubmit={poisonsFormik.handleSubmit}>\r\n            <Grid container spacing={5}>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Название яда'} onChange={poisonsFormik.handleChange} name='name' type=\"text\"\r\n                               fullWidth/>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Объем(кг)'} onChange={poisonsFormik.handleChange} name='weight' type=\"number\"\r\n                               fullWidth/>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Цена(руб)'} onChange={poisonsFormik.handleChange} name='cost' type=\"number\"\r\n                               fullWidth/>\r\n                </Grid>\r\n            </Grid>\r\n            <Box my={3}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<CloudUploadIcon/>}\r\n                    type=\"submit\"\r\n                >\r\n                    Добавить\r\n                </Button>\r\n            </Box>\r\n        </form>\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {TableCell, TableHead, TableRow} from '@material-ui/core/'\r\n\r\ntype MyProps = {\r\n    headData: string[]\r\n}\r\n\r\nexport const MyTableHead:FC<MyProps> = ({headData}) => {\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                {\r\n                    headData.map((text, index) =>\r\n                        <TableCell key={index}>{text}</TableCell>\r\n                    )\r\n                }\r\n            </TableRow>\r\n        </TableHead>\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {MyTableHead} from './components/MyTableHead'\r\nimport {Paper, Table, TableBody, TableContainer} from '@material-ui/core'\r\n\r\ntype MyProps = {\r\n    headData: string[]\r\n}\r\n\r\nexport const MyTable: FC<MyProps> = ({headData, children}) => {\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table size=\"small\" aria-label=\"a dense table\">\r\n                <MyTableHead\r\n                    headData={headData}\r\n                />\r\n                <TableBody>\r\n                    {children}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport CornStore from '../store/CornStore'\r\nimport {observer} from 'mobx-react'\r\nimport {runInAction, toJS} from 'mobx'\r\nimport {TableCell, TableRow} from '@material-ui/core'\r\nimport {MyTable} from './Table/MyTable'\r\n\r\n\r\nexport const PoisonsTable = observer(() => {\r\n    // FIXME подумать над дублированием и убрать any\r\n    const sortBy = (name: string) => {\r\n        runInAction(() => {\r\n            CornStore.allPoisons.sort((a: any, b: any) => a[name] < b[name] ? 1 : -1)\r\n        })\r\n    }\r\n    const sortByName = () => {\r\n        console.log(toJS(CornStore.allPoisons))\r\n        runInAction(() => {\r\n            CornStore.allPoisons.sort((a: any, b: any) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0))\r\n        })\r\n    }\r\n    if (!CornStore.allPoisons.length) {\r\n        return (\r\n            <p>Пусто</p>\r\n        )\r\n    }\r\n    return (\r\n        <MyTable\r\n            headData={['Название', 'Объем(кг)', 'Цена(руб)', 'Стоимость(кг/р)', 'Дата']}\r\n        >\r\n            {CornStore.allPoisons.map((item) => (\r\n                <TableRow key={item._id}>\r\n                    <TableCell>{item.name}</TableCell>\r\n                    <TableCell>{item.weight}</TableCell>\r\n                    <TableCell>{item.cost}</TableCell>\r\n                    <TableCell>{item.sum}</TableCell>\r\n                    <TableCell>{new Date(item.date).toLocaleDateString()}</TableCell>\r\n                </TableRow>\r\n            ))}\r\n        </MyTable>\r\n    )\r\n})\r\n","import React, {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {MainLayout} from '../layouts/MainLayout/MainLayout'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {Loader} from '../components/Loader/Loader'\r\nimport {AddPoisons} from '../components/AddPoisons/AddPoisons'\r\nimport {PoisonsTable} from '../components/PoisonsTable'\r\nimport {TypePoisons} from '../types/types'\r\nimport CornStore from '../store/CornStore'\r\nimport {observer} from 'mobx-react'\r\nimport {runInAction} from 'mobx'\r\nimport {Box, Button, Grid, Typography} from '@material-ui/core'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\n\r\n\r\nexport const PoisonsPage = observer(() => {\r\n    const {loading, request} = useHttp()\r\n    const {token} = useContext(AuthContext)\r\n    const fetchPoisons = useCallback(async () => {\r\n        try {\r\n            const fetched: TypePoisons[] = await request('api/poisons/getList', 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            runInAction(() => {\r\n                CornStore.allPoisons = fetched\r\n            })\r\n        } catch (e) {\r\n        }\r\n    }, [token, request])\r\n\r\n    useEffect(() => {\r\n        fetchPoisons()\r\n    }, [fetchPoisons])\r\n\r\n    const [isShowForm, setIsShowForm] = useState<boolean>(false)\r\n\r\n    if (loading) {\r\n        return <MainLayout><Loader/></MainLayout>\r\n    }\r\n    return (\r\n        <MainLayout>\r\n            <Box my={5}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Typography variant=\"h2\" component=\"h1\">Яды</Typography>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={isShowForm ? <RemoveIcon/> : <AddCircleIcon/>}\r\n                        onClick={() => setIsShowForm(!isShowForm)}\r\n                    >\r\n                        {isShowForm ? 'Закрыть' : 'Добавить яд'}\r\n                    </Button>\r\n                </Grid>\r\n            </Box>\r\n            {isShowForm && <AddPoisons/>}\r\n            <PoisonsTable/>\r\n        </MainLayout>\r\n    )\r\n})\r\n","import React, {useContext} from 'react'\r\nimport {useFormik} from 'formik'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {Loader} from './Loader/Loader'\r\nimport {useMessage} from '../hooks/message.hook'\r\nimport CornStore from '../store/CornStore'\r\nimport {runInAction} from 'mobx'\r\nimport {Box, Button, Grid, TextField} from '@material-ui/core'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\r\nimport {useSnackbar} from 'notistack'\r\n\r\ntype TypeForm = {\r\n    name: string\r\n    weight: number\r\n    cost: number\r\n}\r\n\r\nexport const AddCorn = () => {\r\n    const { enqueueSnackbar } = useSnackbar()\r\n    const cornFormik = useFormik<TypeForm>({\r\n        initialValues: {\r\n            name: '',\r\n            weight: 0,\r\n            cost: 0\r\n        },\r\n        onSubmit: async (values) => {\r\n            console.log(values)\r\n            addHandler(values)\r\n\r\n        }\r\n    })\r\n    const auth = useContext(AuthContext)\r\n    const {loading, request} = useHttp()\r\n    const addHandler = async (values: TypeForm) => {\r\n        try {\r\n            const data = await request('/api/corn/addCorn', 'POST', {...values}, {\r\n                Authorization: `Bearer: ${auth.token}`\r\n            })\r\n            const {corn} = data\r\n            runInAction(() => {\r\n                CornStore.allCorn = [...CornStore.allCorn, ...[corn]]\r\n            })\r\n            enqueueSnackbar(`${corn.name} добавлено`, {\r\n                variant: 'success',\r\n            })\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\n    return (\r\n        <form onSubmit={cornFormik.handleSubmit}>\r\n            <Grid container spacing={5}>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Название зерна'} onChange={cornFormik.handleChange} name='name' type=\"text\"\r\n                               fullWidth/>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Объем'} onChange={cornFormik.handleChange} name='weight' type=\"number\"\r\n                               fullWidth/>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Стоимость'} onChange={cornFormik.handleChange} name='cost' type=\"number\"\r\n                               fullWidth/>\r\n                </Grid>\r\n            </Grid>\r\n            <Box my={3}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<CloudUploadIcon/>}\r\n                    type=\"submit\"\r\n                >\r\n                    Добавить\r\n                </Button>\r\n            </Box>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport CornStore from '../store/CornStore'\r\nimport {observer} from 'mobx-react'\r\nimport {runInAction} from 'mobx'\r\nimport {TableCell, TableRow} from '@material-ui/core'\r\nimport {MyTable} from './Table/MyTable'\r\n\r\nexport const CornTable = observer(() => {\r\n    const sortBy = (name: string) => {\r\n        console.log(name)\r\n        runInAction(() => {\r\n            CornStore.allCorn.sort((a: any, b: any) => a[name] < b[name] ? 1 : -1)\r\n        })\r\n    }\r\n    const sortByName = () => {\r\n        runInAction(() => {\r\n            CornStore.allCorn.sort((a: any, b: any) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0))\r\n        })\r\n    }\r\n    if (!CornStore.allCorn.length) {\r\n        return <p>Пусто</p>\r\n    }\r\n    return (\r\n        <MyTable\r\n            headData={['Название','Объем','Стоимость']}\r\n        >\r\n            {CornStore.allCorn.map((item, index) => (\r\n                <TableRow key={index}>\r\n                    <TableCell>{item.name}</TableCell>\r\n                    <TableCell>{item.weight}</TableCell>\r\n                    <TableCell>{item.cost}</TableCell>\r\n                </TableRow>\r\n            ))}\r\n        </MyTable>\r\n    )\r\n})\r\n","import React, {useState} from 'react'\r\nimport {MainLayout} from '../layouts/MainLayout/MainLayout'\r\nimport {AddCorn} from '../components/AddCorn'\r\nimport {CornTable} from '../components/CornTable'\r\nimport {Box, Button, Grid, Typography} from '@material-ui/core'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport {observer} from 'mobx-react'\r\n\r\nexport const CornPage = observer(() => {\r\n    const [isShowForm, setIsShowForm] = useState<boolean>(false)\r\n    return (\r\n        <MainLayout>\r\n            <Box my={5}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Typography variant=\"h2\" component=\"h1\">Зерно</Typography>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={isShowForm ? <RemoveIcon/> : <AddCircleIcon/>}\r\n                        onClick={() => setIsShowForm(!isShowForm)}\r\n                    >\r\n                        {isShowForm ? 'Закрыть' : 'Добавить культуру'}\r\n                    </Button>\r\n                </Grid>\r\n            </Box>\r\n\r\n            {isShowForm && <AddCorn/>}\r\n            <CornTable/>\r\n        </MainLayout>\r\n    )\r\n})\r\n","import React, {useContext} from 'react'\r\nimport {useMessage} from '../hooks/message.hook'\r\nimport {useFormik} from 'formik'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {runInAction, toJS} from 'mobx'\r\nimport CornStore from '../store/CornStore'\r\nimport {Loader} from './Loader/Loader'\r\nimport {observer} from 'mobx-react'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\r\nimport {Box, Button, Grid, InputLabel, MenuItem, Select, TextField} from '@material-ui/core'\r\nimport {RequestContext} from '../context/RequestContext'\r\nimport {useSnackbar} from 'notistack'\r\n\r\n\r\ntype TypeForm = {\r\n    _id: string\r\n    weight: number\r\n    date: Date | null\r\n}\r\n\r\nexport const AddSale = observer(() => {\r\n    const req = useContext(RequestContext)\r\n    const { enqueueSnackbar } = useSnackbar()\r\n    const saleFormik = useFormik<TypeForm>({\r\n        initialValues: {\r\n            _id: CornStore.allCorn[0]._id,\r\n            weight: 0,\r\n            date: null\r\n        },\r\n        onSubmit: async (values) => {\r\n            await addHandler(values)\r\n            req.loadingCorn()\r\n        }\r\n    })\r\n    const auth = useContext(AuthContext)\r\n    const {loading, request} = useHttp()\r\n    const addHandler = async (values: TypeForm) => {\r\n        try {\r\n            const data = await request('/api/sale/add', 'POST', {...values}, {\r\n                Authorization: `Bearer: ${auth.token}`\r\n            })\r\n            const {sale} = data\r\n            runInAction(() => {\r\n                console.log(toJS(CornStore.allSale))\r\n                CornStore.allSale = [...CornStore.allSale, ...[sale]]\r\n                console.log(toJS(CornStore.allSale))\r\n            })\r\n            enqueueSnackbar(data.message, {\r\n                variant: 'success',\r\n            })\r\n        } catch (e) {\r\n            console.log(e)\r\n            enqueueSnackbar(e.message, {\r\n                variant: 'error',\r\n            })\r\n        }\r\n    }\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\n    return (\r\n        <form onSubmit={saleFormik.handleSubmit}>\r\n            <Grid container spacing={5}>\r\n                <Grid item xs={4}>\r\n                    <InputLabel id=\"selectLabel\">Выберите зерно</InputLabel>\r\n                    <Select labelId=\"selectLabel\" id=\"select\" defaultValue={CornStore.allCorn[0]._id} name='_id'\r\n                            onChange={event => saleFormik.setFieldValue('_id', event.target.value)}\r\n                            fullWidth>\r\n                        {\r\n                            CornStore.allCorn.map(({_id, name, cost, weight}) =>\r\n                                <MenuItem value={_id} key={_id}>{`${name}(${cost}₽, ${weight}кг)`}</MenuItem>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TextField label={'Объем'} onChange={saleFormik.handleChange} name='weight' type=\"number\"\r\n                               fullWidth/>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TextField\r\n                        id=\"date\"\r\n                        label=\"Дата продажи\"\r\n                        type=\"date\"\r\n                        onChange={saleFormik.handleChange}\r\n                        defaultValue={null}\r\n                        fullWidth\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Box my={3}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<CloudUploadIcon/>}\r\n                    type=\"submit\"\r\n                >\r\n                    Добавить\r\n                </Button>\r\n            </Box>\r\n        </form>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport CornStore from '../store/CornStore'\r\nimport {observer} from 'mobx-react'\r\nimport {TableCell, TableRow} from '@material-ui/core'\r\nimport {MyTable} from './Table/MyTable'\r\n\r\nexport const SaleTable = observer(() => {\r\n    return(\r\n        <MyTable\r\n            headData={['Название','Объем','Сумма', 'Дата']}\r\n        >\r\n            {CornStore.allSale.map((item) => (\r\n                <TableRow key={item._id}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                        {item.name}\r\n                    </TableCell>\r\n                    <TableCell>{item.weight}</TableCell>\r\n                    <TableCell>{item.sum}</TableCell>\r\n                    <TableCell>{new Date(item.date).toLocaleDateString()}</TableCell>\r\n                </TableRow>\r\n            ))}\r\n        </MyTable>\r\n    )\r\n})\r\n","import React, {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {MainLayout} from '../layouts/MainLayout/MainLayout'\r\nimport {AddSale} from '../components/AddSale'\r\nimport {SaleTable} from '../components/SaleTable'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {TypeSale} from '../types/types'\r\nimport {runInAction, toJS} from 'mobx'\r\nimport CornStore from '../store/CornStore'\r\nimport {Loader} from '../components/Loader/Loader'\r\nimport {observer} from 'mobx-react'\r\nimport {Box, Button, Grid, Typography} from '@material-ui/core'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\n\r\nexport const SalePage = observer(() => {\r\n    const {loading, request} = useHttp()\r\n    const {token} = useContext(AuthContext)\r\n    const fetchSale = useCallback(async () => {\r\n        try {\r\n            const fetched: TypeSale[] = await request('api/sale/get', 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            runInAction(() => {\r\n                CornStore.allSale = fetched\r\n            })\r\n        } catch (e) {\r\n        }\r\n    }, [token, request])\r\n\r\n    useEffect(() => {\r\n        fetchSale()\r\n    }, [fetchSale])\r\n    const [isShowForm, setIsShowForm] = useState<boolean>(false)\r\n    if (loading) return <MainLayout><Loader/></MainLayout>\r\n    return(\r\n        <MainLayout>\r\n            <Box my={5}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Typography variant=\"h2\" component=\"h1\">Продажи</Typography>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={isShowForm ? <RemoveIcon/> : <AddCircleIcon/>}\r\n                        onClick={() => setIsShowForm(!isShowForm)}\r\n                    >\r\n                        {isShowForm ? 'Закрыть' : 'Добавить продажу'}\r\n                    </Button>\r\n                </Grid>\r\n            </Box>\r\n            {isShowForm && <AddSale/>}\r\n            <SaleTable/>\r\n        </MainLayout>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport {AuthContext} from './context/AuthContext'\r\nimport {RequestContext} from './context/RequestContext'\r\nimport {useAuth} from './hooks/auth.hook.js'\r\nimport {Loader} from './components/Loader/Loader'\r\nimport {useRoutes} from './routes'\r\nimport UserStore from './store/UserStore'\r\nimport {useHttp} from './hooks/http.hook'\r\nimport {observer} from 'mobx-react'\r\nimport {MainRequest} from './request/MainRequests'\r\n\r\nconst App = observer(() => {\r\n    const {login, logout} = useAuth()\r\n    const {token, ready, userId} = UserStore\r\n    const isAuthenticated = !!token\r\n    const routes = useRoutes(isAuthenticated)\r\n    const {loading, request} = useHttp()\r\n    const {loadingCorn} = MainRequest()\r\n    if (!ready) {\r\n        return <Loader/>\r\n    }\r\n    return (\r\n        <AuthContext.Provider value={{\r\n            token, login, logout, userId, isAuthenticated\r\n        }}>\r\n            <RequestContext.Provider value={{loadingCorn}}>\r\n                <Router>\r\n                    {routes}\r\n                </Router>\r\n            </RequestContext.Provider>\r\n        </AuthContext.Provider>\r\n    )\r\n})\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {DashboardPage} from './pages/DashboardPage'\r\nimport {AuthPage} from './pages/AuthPage/AuthPage'\r\nimport {PoisonsPage} from './pages/PoisonsPage'\r\nimport {CornPage} from './pages/CornPage'\r\nimport {SalePage} from './pages/SalePage'\r\n\r\nexport const useRoutes = (isAuthenticated: boolean) => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <Switch>\r\n                <Route exact path={'/'} component={DashboardPage}/>\r\n                <Route exact path={'/poisons'} component={PoisonsPage}/>\r\n                <Route exact path={'/corn'} component={CornPage}/>\r\n                <Route exact path={'/sale'} component={SalePage}/>\r\n                <Redirect to='/'/>\r\n            </Switch>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path={'/login'} component={AuthPage}/>\r\n            <Redirect to='/login'/>\r\n        </Switch>\r\n    )\r\n}\r\n","import {TypeCorn} from '../types/types'\r\nimport {runInAction} from 'mobx'\r\nimport CornStore from '../store/CornStore'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport UserStore from '../store/UserStore'\r\n\r\nexport const MainRequest = () => {\r\n    const {loading, request, error, clearError} = useHttp()\r\n    const {token} = UserStore\r\n\r\n    const loadingCorn = async () => {\r\n        try {\r\n            const fetched: TypeCorn[] = await request('api/corn/getList', 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            runInAction(() => {\r\n                console.log(fetched)\r\n                CornStore.allCorn = fetched\r\n            })\r\n        } catch (e) {\r\n        }\r\n    }\r\n    return {loadingCorn}\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport {SnackbarProvider} from 'notistack'\r\n\r\nReactDOM.render(\r\n    // <React.StrictMode>\r\n    <SnackbarProvider\r\n        anchorOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'right',\r\n        }}\r\n        iconVariant={{\r\n            success: '✅',\r\n            error: '✖️',\r\n            warning: '⚠️',\r\n            info: 'ℹ️',\r\n        }}\r\n    >\r\n        <App/>\r\n    </SnackbarProvider>,\r\n    // </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\nreportWebVitals()\r\n"],"sourceRoot":""}