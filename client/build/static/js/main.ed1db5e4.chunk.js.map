{"version":3,"sources":["context/AuthContext.ts","hooks/auth.hook.js.ts","components/Loader/Loader.tsx","assets/images/logo.png","components/Logo/Logo.tsx","containers/Sidebar/Sidebar.tsx","containers/Header/Header.tsx","layouts/MainLayout/MainLayout.tsx","components/CardMetric/CardMetric.tsx","store/CornStore.ts","hooks/http.hook.ts","components/CornStatic.tsx","pages/DashboardPage.tsx","hooks/message.hook.ts","pages/AuthPage.tsx","components/DatePicker.tsx","components/AddPoisons/AddPoisons.tsx","components/PoisonsTable.tsx","pages/PoisonsPage.tsx","components/AddCorn.tsx","components/CornTable.tsx","pages/CornPage.tsx","App.tsx","routes.tsx","reportWebVitals.ts","index.tsx","components/Logo/Logo.module.scss","layouts/MainLayout/MainLayout.module.scss","containers/Sidebar/Sidebar.module.scss"],"names":["noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","storageName","Loader","className","Logo","title","style","wrapper","to","src","logo","alt","Sidebar","isShow","classes","close","join","Header","setIsShow","onClick","cursor","fontSize","MainLayout","children","useState","CardMetric","text","col","console","log","allCorn","allPoisons","getAllName","result","map","item","name","getAllWeight","weight","getAllColor","index","color","makeAutoObservable","this","useHttp","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","CornStatic","observer","useContext","fetchCorn","Authorization","fetched","runInAction","CornStore","useEffect","length","labels","datasets","backgroundColor","borderColor","borderWidth","DashboardPage","label","options","scales","yAxes","stacked","ticks","beginAtZero","xAxes","fill","useMessage","window","M","toast","html","AuthPage","email","password","form","setForm","changeHandler","event","target","value","auth","registerHandler","loginHandler","id","type","onChange","htmlFor","disabled","DatePicker","format","formik","autoClose","onSelect","setFieldValue","dateRef","useRef","Datepicker","init","current","ref","AddPoisons","fetchPoisons","poisonsFormik","useFormik","initialValues","cost","date","onSubmit","values","addHandler","resetForm","poison","handleSubmit","handleChange","PoisonsTable","Date","toLocaleDateString","_id","PoisonsPage","isShowForm","setIsShowForm","AddCorn","cornFormik","corn","CornTable","CornPage","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","local","getItem","parse","useAuth","routes","exact","path","component","useRoutes","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ed1db5e4.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nfunction noop() {}\r\n\r\ntype TypeContext = {\r\n    token: null | string\r\n    userId: null | string\r\n    login: (jwtToken: string, id: string) => void\r\n    logout: () => void\r\n    isAuthenticated: boolean\r\n}\r\n\r\nexport const AuthContext = createContext({\r\n    token: null,\r\n    userId: null,\r\n    login: noop,\r\n    logout: noop,\r\n    isAuthenticated: false\r\n} as TypeContext)\r\n","import {useCallback, useEffect, useState} from 'react'\r\n\r\nconst storageName: string = 'userData'\r\n\r\ntype StorageType = {\r\n    userId: string | null\r\n    token: string | null\r\n}\r\n\r\nexport const useAuth = () => {\r\n    const [token, setToken] = useState<null | string>(null)\r\n    const [ready, setReady] = useState<boolean>(false)\r\n    const [userId, setUserId] = useState<null | string>(null)\r\n\r\n    const login = useCallback((jwtToken: string, id: string) => {\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n\r\n        localStorage.setItem(storageName, JSON.stringify({\r\n            userId: id, token: jwtToken\r\n        } as StorageType))\r\n    }, [])\r\n    const logout = useCallback(() => {\r\n        setToken(null)\r\n        setUserId(null)\r\n        localStorage.removeItem(storageName)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const local = localStorage.getItem(storageName) || '{}'\r\n        const data = JSON.parse(local)\r\n        if (data && data.token) {\r\n            const data = JSON.parse(local)\r\n            login(data.token, data.userId)\r\n        }\r\n        setReady(true)\r\n    }, [login])\r\n\r\n    return {login, logout, token, userId, ready}\r\n}\r\n","import React from 'react'\r\n\r\nexport const Loader = () => {\r\n    return(\r\n        <div className=\"preloader-wrapper big active\">\r\n            <div className=\"spinner-layer spinner-blue\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.863bdabf.png\";","import React from 'react'\nimport logo from '../../assets/images/logo.png'\nimport style from './Logo.module.scss'\nimport {Link} from 'react-router-dom'\n\nexport const Logo = () => {\n    const title = 'КФХ Кузьмин'\n    return (\n        <div className={style.wrapper}>\n            <Link to={'/'}>\n                <img src={logo} alt={title} className={style.logo}/>\n            </Link>\n            <span className={style.title}>{title}</span>\n        </div>\n    )\n}\n","import React, {FC} from 'react'\nimport style from './Sidebar.module.scss'\nimport {Logo} from '../../components/Logo/Logo'\n\ntype MyProps = {\n    isShow: boolean\n}\n\nexport const Sidebar:FC<MyProps> = ({isShow}) => {\n    const classes = [style.wrapper, isShow ? '' : style.close]\n    return (\n        <div className={`${classes.join(' ')} light-blue lighten-5`}>\n            <Logo/>\n        </div>\n    )\n}\n","import React, {FC} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\ntype MyProps = {\r\n    isShow: boolean,\r\n    setIsShow: (value: boolean) => void\r\n}\r\nexport const Header:FC<MyProps> = ({isShow, setIsShow}) => {\r\n    const styleMenu = {\r\n        cursor: 'pointer',\r\n        fontSize: 32\r\n    }\r\n    return (\r\n        <div>\r\n            <nav className='light-blue lighten-5 black-text'>\r\n                <div className=\"nav-wrapper\">\r\n                    <ul className=\"left hide-on-med-and-down\">\r\n                        <li><span onClick={() => setIsShow(!isShow)}><i className=\"material-icons\" style={styleMenu}>menu</i></span></li>\r\n                    </ul>\r\n                    <ul className='right hide-on-med-and-down'>\r\n                        <li>\r\n                            <Link className='black-text' to='/login'>Авторизация</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link className='black-text' to='/add-corn'>Зерно</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link className='black-text' to='/poisons'>Яды</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n","import React, {FC, useState} from 'react'\nimport style from './MainLayout.module.scss'\nimport {Sidebar} from '../../containers/Sidebar/Sidebar'\nimport {Header} from '../../containers/Header/Header'\n\ntype TypeChildren = {\n    children: React.ReactNode\n}\nexport const MainLayout: FC<TypeChildren> = ({children}) => {\n    const [isShow, setIsShow] = useState<boolean>(true)\n    const classes = [style.wrapper, isShow ? '' : style.close]\n    return (\n        <div className={classes.join(' ')}>\n            <Sidebar\n                isShow={isShow}\n            />\n            <div>\n                <Header\n                    isShow={isShow}\n                    setIsShow={setIsShow}\n                />\n                <div className='container'>\n                    {children}\n                </div>\n            </div>\n\n        </div>\n    )\n}\n","import React, {FC} from 'react'\r\n\r\ntype TypeMyProps = {\r\n    text: string | null\r\n    col: number\r\n    children: React.ReactNode\r\n}\r\nexport const CardMetric:FC<TypeMyProps> = ({text, col, children}) => {\r\n    console.log(text)\r\n    return (\r\n        <div className={`col s${col}`}>\r\n            <div className=\"card\">\r\n                <div className=\"card-image\">\r\n                    {children}\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    {text && <p>{text}</p>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {makeAutoObservable} from 'mobx'\nimport {TypeCorn, TypePoisons} from '../types/types'\n\nclass CornStore {\n\n    allCorn:TypeCorn[] | [] = []\n    allPoisons: TypePoisons[] | [] = []\n\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    getAllName = () => {\n        const result: Array<string> = this.allCorn.map(item => {\n            return item.name\n        })\n        return result\n        console.log(result)\n    }\n\n    getAllWeight = () => {\n        const result: Array<number> = this.allCorn.map(item => {\n            return item.weight\n        })\n        return result\n        console.log(result)\n    }\n\n    getAllColor = (index: number) => {\n        const result: Array<string> = this.allCorn.map(item => {\n            return item.color[index]\n        })\n        return result\n        console.log(result)\n    }\n}\n\n\n\nexport default new CornStore()\n","import {useCallback, useState} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [error, setError] = useState<boolean | null>(null)\r\n\r\n    const request = useCallback(async (url: string, method: string = 'GET', body = null, headers: any = {}) => {\r\n        setLoading(true)\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n\r\n            const response = await fetch(url, {method, body, headers})\r\n            const data = await response.json()\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n            setLoading(false)\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n}\r\n","import React, {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {Pie} from 'react-chartjs-2/dist'\r\nimport {CardMetric} from './CardMetric/CardMetric'\r\nimport CornStore from '../store/CornStore'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {TypeCorn} from '../types/types'\r\nimport {runInAction} from 'mobx'\r\nimport {observer} from 'mobx-react'\r\nimport {Loader} from './Loader/Loader'\r\n\r\nexport const CornStatic = observer(() => {\r\n\r\n    const {loading, request} = useHttp()\r\n    const {token} = useContext(AuthContext)\r\n    const fetchCorn = useCallback(async () => {\r\n        try {\r\n            const fetched: TypeCorn[] = await request('api/corn/getList', 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            runInAction(() => {\r\n                CornStore.allCorn = fetched\r\n            })\r\n        } catch (e) {\r\n        }\r\n    }, [token, request])\r\n\r\n    useEffect(() => {\r\n        fetchCorn()\r\n    }, [fetchCorn])\r\n\r\n    const data = CornStore.allCorn.length ? {\r\n        labels: CornStore.getAllName(),\r\n        datasets: [\r\n            {\r\n                data: CornStore.getAllWeight(),\r\n                backgroundColor: CornStore.getAllColor(0),\r\n                borderColor: CornStore.getAllColor(1),\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    } : {};\r\n    return (\r\n        <CardMetric\r\n            text={'Общее количество зерна'}\r\n            col={3}\r\n        >\r\n            {CornStore.allCorn.length ? (\r\n                <Pie\r\n                    data={data}\r\n                />\r\n            ) : (\r\n                <Loader/>\r\n            )}\r\n\r\n        </CardMetric>\r\n    )\r\n})\r\n","import React from 'react'\nimport {MainLayout} from '../layouts/MainLayout/MainLayout'\nimport {CardMetric} from '../components/CardMetric/CardMetric'\nimport {Pie, Bar, Line} from 'react-chartjs-2/dist'\nimport CornStore from '../store/CornStore'\nimport {observer} from 'mobx-react'\nimport {CornStatic} from '../components/CornStatic'\n\nexport const DashboardPage = observer(() => {\n\n\n    const allSale = {\n        labels: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октрябрь','Ноябрь', 'Декабрь'],\n        datasets: [\n            {\n                label: 'Рожь',\n                data: [5, 19, 3, 5, 2, 3, 5, 9, 4, 6, 7, 15],\n                backgroundColor: 'rgba(255, 99, 132, 1)',\n            },\n            {\n                label: 'Пшеница',\n                data: [8, 15, 7, 5, 2, 5, 7, 9, 4, 6, 6, 10],\n                backgroundColor: 'rgba(54, 162, 235, 1)',\n            },\n            {\n                label: 'Ячмень',\n                data: [4, 11, 3, 5, 2, 4, 6, 9, 4, 7, 7, 11],\n                backgroundColor: 'rgba(255, 206, 86, 1)',\n            },\n        ],\n    };\n\n    const optionsAllSale = {\n        scales: {\n            yAxes: [\n                {\n                    stacked: true,\n                    ticks: {\n                        beginAtZero: true,\n                    },\n                },\n            ],\n            xAxes: [\n                {\n                    stacked: true,\n                },\n            ],\n        },\n    };\n\n    const harvesting = {\n        labels: ['Июнь', 'Июль', 'Август'],\n        datasets: [\n            {\n                label: 'ГА',\n                data: [200, 300, 250],\n                fill: false,\n                backgroundColor: 'rgb(255, 99, 132)',\n                borderColor: 'rgba(255, 99, 132, 0.2)',\n            },\n        ],\n    };\n\n    const optionsHarvesting = {\n        scales: {\n            yAxes: [\n                {\n                    ticks: {\n                        beginAtZero: true,\n                    },\n                },\n            ],\n        },\n    };\n\n    return (\n        <MainLayout>\n            <h2>Панель приборов</h2>\n            <div className='row'>\n                <CornStatic/>\n                <CardMetric\n                    text={'Продажи по месяцам'}\n                    col={6}\n                >\n                    <Bar\n                        data={allSale}\n                        options={optionsAllSale}\n                    />\n                </CardMetric>\n                <CardMetric text={'Уборка ГА за месяц'} col={3}>\n                    <Line data={harvesting} options={optionsHarvesting} />\n                </CardMetric>\n            </div>\n        </MainLayout>\n    )\n})\n","import {useCallback} from 'react'\r\n\r\nexport const useMessage = () => {\r\n    return useCallback(text => {\r\n        // @ts-ignore\r\n        if (window.M && text) {\r\n            // @ts-ignore\r\n            window.M.toast({html: text})\r\n        }\r\n    }, [])\r\n}\r\n","import React, {useContext, useEffect, useState} from 'react'\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useMessage} from '../hooks/message.hook'\r\n\r\ntype FormType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nexport const AuthPage = () => {\r\n    const [form, setForm] = useState<FormType>({\r\n        email: '',\r\n        password: ''\r\n    })\r\n\r\n    const message = useMessage()\r\n\r\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setForm({...form, [event.target.name]: event.target.value})\r\n        console.log(form)\r\n    }\r\n    const auth = useContext(AuthContext)\r\n    const {loading, request, error, clearError} = useHttp()\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/register', 'POST', {...form})\r\n            message(data.message)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    const loginHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/login', 'POST', {...form})\r\n            auth.login(data.token, data.id)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        message(error)\r\n        clearError()\r\n    }, [error, message, clearError])\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                        <input type=\"email\" className=\"validate\" name='email' onChange={event => changeHandler(event)}/>\r\n                        <label htmlFor=\"email\">Email</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                        <input type=\"password\" name='password' className=\"validate\"\r\n                               onChange={event => changeHandler(event)}/>\r\n                        <label htmlFor=\"password\">Password</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button onClick={registerHandler} disabled={loading}>Зарегистрироваться</button>\r\n            <button onClick={loginHandler} disabled={loading}>Авторизироватсья</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC, useEffect, useRef} from 'react'\r\n\r\ntype MyProps = {\r\n    format?: string,\r\n    formik: any,\r\n    label?: string\r\n}\r\n\r\nexport const DatePicker:FC<MyProps> = ({format = 'yyyy-mm-dd', formik, label = 'Дата'}) => {\r\n    const options = {\r\n        autoClose: true,\r\n        format: format,\r\n        onSelect: (value:string) => formik.setFieldValue('date', value, true)\r\n    }\r\n    const dateRef = useRef<any>()\r\n    useEffect(() => {\r\n        (window as any).M.Datepicker.init(dateRef.current, options)\r\n    }, [dateRef.current])\r\n    return (\r\n        <>\r\n            <input type=\"text\" ref={dateRef} className=\"datepicker\" name='date'/>\r\n            <label htmlFor=\"password\">Дата</label>\r\n        </>\r\n    )\r\n}\r\n","import React, {FC, useContext} from 'react'\r\nimport {useHttp} from '../../hooks/http.hook'\r\nimport {AuthContext} from '../../context/AuthContext'\r\nimport {useFormik} from 'formik'\r\nimport {Loader} from '../Loader/Loader'\r\nimport {useMessage} from '../../hooks/message.hook'\r\nimport CornStore from '../../store/CornStore'\r\nimport {DatePicker} from '../DatePicker'\r\nimport {runInAction} from 'mobx'\r\nimport {TypePoisons} from '../../types/types'\r\n\r\ntype TypeForm = {\r\n    title: string\r\n    weight: number\r\n    cost: number\r\n    date: Date | null\r\n}\r\n\r\ntype MyProps = {\r\n    fetchPoisons: () => void\r\n}\r\n\r\nexport const AddPoisons: FC<MyProps> = ({fetchPoisons}) => {\r\n    const message = useMessage()\r\n    const poisonsFormik = useFormik<TypeForm>({\r\n        initialValues: {\r\n            title: '',\r\n            weight: 0,\r\n            cost: 0,\r\n            date: null\r\n        },\r\n        onSubmit: async (values) => {\r\n            await addHandler(values)\r\n            poisonsFormik.resetForm()\r\n        }\r\n    })\r\n    const auth = useContext(AuthContext)\r\n    const {loading, request} = useHttp()\r\n    const addHandler = async (values: TypeForm) => {\r\n        try {\r\n            const data = await request('/api/poisons/add', 'POST', {...values}, {\r\n                Authorization: `Bearer: ${auth.token}`\r\n            })\r\n            const {poison} = data\r\n            runInAction(() => {\r\n                CornStore.allPoisons = [...CornStore.allPoisons, ...[poison]]\r\n            })\r\n            message('Добавлено')\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\n    return (\r\n        <form onSubmit={poisonsFormik.handleSubmit}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s12\">\r\n                            <input className='validate' onChange={poisonsFormik.handleChange} name='title' type=\"text\"/>\r\n                            <label htmlFor=\"password\">Название яда</label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row s12\">\r\n                        <div className=\"input-field col s4\">\r\n                            <input className='validate' onChange={poisonsFormik.handleChange} name='weight'\r\n                                   type=\"number\"/>\r\n                            <label htmlFor=\"password\">Объем</label>\r\n                        </div>\r\n\r\n                        <div className=\"input-field col s4\">\r\n                            <input className='validate' onChange={poisonsFormik.handleChange} name='cost'\r\n                                   type=\"number\"/>\r\n                            <label htmlFor=\"password\">Стоимость</label>\r\n                        </div>\r\n\r\n                        <div className=\"input-field col s4\">\r\n                            <DatePicker\r\n                                formik={poisonsFormik}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button type='submit' className=\"btn waves-effect waves-light\">Отправить\r\n                    <i className=\"material-icons right\">send</i>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport CornStore from '../store/CornStore'\r\nimport {observer} from 'mobx-react'\r\n\r\n\r\nexport const PoisonsTable = observer(() => {\r\n    if (!CornStore.allPoisons.length) {\r\n        return (\r\n            <p>Пусто</p>\r\n        )\r\n    }\r\n    return (\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>Название</th>\r\n                <th>Объем</th>\r\n                <th>Стоимость</th>\r\n                <th>Дата</th>\r\n            </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n            {\r\n                CornStore.allPoisons.map((item, index) => {\r\n                    return (\r\n                        <tr key={item._id}>\r\n                            <td>{item.title}</td>\r\n                            <td>{item.weight}</td>\r\n                            <td>{item.cost}</td>\r\n                            <td>{new Date(item.date).toLocaleDateString()}</td>\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n})\r\n","import React, {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {MainLayout} from '../layouts/MainLayout/MainLayout'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {Loader} from '../components/Loader/Loader'\r\nimport {AddPoisons} from '../components/AddPoisons/AddPoisons'\r\nimport {PoisonsTable} from '../components/PoisonsTable'\r\nimport {TypePoisons} from '../types/types'\r\nimport CornStore from '../store/CornStore'\r\nimport {observer} from 'mobx-react'\r\nimport {runInAction} from 'mobx'\r\n\r\n\r\nexport const PoisonsPage = observer(() => {\r\n    const {loading, request} = useHttp()\r\n    const {token} = useContext(AuthContext)\r\n    const fetchPoisons = useCallback(async () => {\r\n        try {\r\n            const fetched: TypePoisons[] = await request('api/poisons/getList', 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            runInAction(() => {\r\n                CornStore.allPoisons = fetched\r\n            })\r\n        } catch (e) {\r\n        }\r\n    }, [token, request])\r\n\r\n    useEffect(() => {\r\n        fetchPoisons()\r\n    }, [fetchPoisons])\r\n\r\n    const [isShowForm, setIsShowForm] = useState<boolean>(false)\r\n\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\n    return (\r\n        <MainLayout>\r\n            <div className=\"waves-effect waves-light btn\" onClick={() => setIsShowForm(!isShowForm)}>Добавить яд</div>\r\n            {isShowForm && <AddPoisons\r\n                fetchPoisons={fetchPoisons}\r\n            />}\r\n            <PoisonsTable/>\r\n        </MainLayout>\r\n    )\r\n})\r\n","import React, {useContext} from 'react'\r\nimport {useFormik} from 'formik'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {Loader} from './Loader/Loader'\r\nimport {useMessage} from '../hooks/message.hook'\r\nimport CornStore from '../store/CornStore'\r\nimport {TypeCorn} from '../types/types'\r\nimport {runInAction} from 'mobx'\r\n\r\ntype TypeForm = {\r\n    name: string\r\n    weight: number\r\n    cost: number\r\n}\r\n\r\nexport const AddCorn = () => {\r\n    const message = useMessage()\r\n    const cornFormik = useFormik<TypeForm>({\r\n        initialValues: {\r\n            name: '',\r\n            weight: 0,\r\n            cost: 0\r\n        },\r\n        onSubmit: async (values) => {\r\n            console.log(values)\r\n            addHandler(values)\r\n\r\n        }\r\n    })\r\n    const auth = useContext(AuthContext)\r\n    const {loading, request} = useHttp()\r\n    const addHandler = async (values: TypeForm) => {\r\n        try {\r\n            const data = await request('/api/corn/addCorn', 'POST', {...values}, {\r\n                Authorization: `Bearer: ${auth.token}`\r\n            })\r\n            const {corn} = data\r\n            runInAction(() => {\r\n                CornStore.allCorn = [...CornStore.allCorn, ...[corn]]\r\n            })\r\n            message('Добавлено')\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\n    return(\r\n        <form onSubmit={cornFormik.handleSubmit}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s12\">\r\n                            <input className='validate' onChange={cornFormik.handleChange} name='name' type=\"text\"/>\r\n                            <label htmlFor=\"password\">Название зерна</label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row s12\">\r\n                        <div className=\"input-field col s6\">\r\n                            <input className='validate' onChange={cornFormik.handleChange} name='weight'\r\n                                   type=\"number\"/>\r\n                            <label htmlFor=\"password\">Объем</label>\r\n                        </div>\r\n\r\n                        <div className=\"input-field col s6\">\r\n                            <input className='validate' onChange={cornFormik.handleChange} name='cost' type=\"number\"/>\r\n                            <label htmlFor=\"password\">Стоимость</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button type='submit' className=\"btn waves-effect waves-light\">Отправить\r\n                    <i className=\"material-icons right\">send</i>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport CornStore from '../store/CornStore'\r\nimport {observer} from 'mobx-react'\r\n\r\nexport const CornTable = observer(() => {\r\n    console.log(CornStore.allCorn.length)\r\n    if (!CornStore.allCorn.length) {\r\n        return <p>Пусто</p>\r\n    }\r\n    return (\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>Название</th>\r\n                <th>Объем</th>\r\n                <th>Стоимость</th>\r\n            </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n            {\r\n                CornStore.allCorn.map((item, index) => {\r\n                    return(\r\n                        <tr key={item._id}>\r\n                            <td>{item.name}</td>\r\n                            <td>{item.weight}</td>\r\n                            <td>{item.cost}</td>\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n})\r\n","import React, {useState} from 'react'\r\nimport {MainLayout} from '../layouts/MainLayout/MainLayout'\r\nimport {AddCorn} from '../components/AddCorn'\r\nimport {CornTable} from '../components/CornTable'\r\nimport {observer} from 'mobx-react'\r\n\r\nexport const CornPage = () => {\r\n    const [isShowForm, setIsShowForm] = useState<boolean>(false)\r\n    return (\r\n        <MainLayout>\r\n            <div className=\"waves-effect waves-light btn\" onClick={() => setIsShowForm(!isShowForm)}>Добавить культуру</div>\r\n            {isShowForm && <AddCorn/>}\r\n            <CornTable/>\r\n        </MainLayout>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport {AuthContext} from \"./context/AuthContext\";\r\nimport {useAuth} from \"./hooks/auth.hook.js\";\r\nimport {Loader} from './components/Loader/Loader'\r\nimport {useRoutes} from './routes'\r\n\r\nconst App = () => {\r\n    const {token, login, logout, userId, ready} = useAuth()\r\n    const isAuthenticated = !!token\r\n    const routes = useRoutes(isAuthenticated)\r\n    if (!ready) {\r\n        return <Loader/>\r\n    }\r\n    return (\r\n        <AuthContext.Provider value={{\r\n            token, login, logout, userId, isAuthenticated\r\n        }}>\r\n            <Router>\r\n                {routes}\r\n            </Router>\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {DashboardPage} from './pages/DashboardPage'\r\nimport {AuthPage} from './pages/AuthPage'\r\nimport {PoisonsPage} from './pages/PoisonsPage'\r\nimport {CornPage} from './pages/CornPage'\r\n\r\nexport const useRoutes = (isAuthenticated: boolean) => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <Switch>\r\n                <Route exact path={'/'} component={DashboardPage}/>\r\n                <Route exact path={'/poisons'} component={PoisonsPage}/>\r\n                <Route exact path={'/add-corn'} component={CornPage}/>\r\n                <Redirect to='/'/>\r\n            </Switch>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path={'/'} component={DashboardPage}/>\r\n            <Route exact path={'/login'} component={AuthPage}/>\r\n            <Redirect to='/'/>\r\n        </Switch>\r\n    )\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Logo_wrapper__3tWNt\",\"logo\":\"Logo_logo__y9fro\",\"title\":\"Logo_title__3J_PO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MainLayout_wrapper__1hprB\",\"close\":\"MainLayout_close__2fG3_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Sidebar_wrapper__3PPWJ\",\"close\":\"Sidebar_close__2iZlH\"};"],"sourceRoot":""}